


using DoubleMathCaptchaUtility;
using FaucetCollector.Script;
using OpenQA.Selenium;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
//css_ref DoubleMathCaptchaUtility.dll
//css_inc RecaptchaUtilities
namespace Adbtc
{
    public class TemplateScript : FaucetScript
    {


        public override FaucetSettings Settings
        {
            get
            {

                return new FaucetSettings("https://adbtc.top/")
                {
                    new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                    new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true },
                    new FaucetSetting(){Name="UseMath",Display="Use MathCaptcha",Type=EditorType.CheckBox,Default=false},
                    new FaucetSetting(){Name="D",Display="Disable After Finish",Type=EditorType.CheckBox,Default=false},
                    new FaucetSetting(){Name="SA",Display="Surf in active window",Type=EditorType.CheckBox,Default=true},
                    new FaucetSetting(){Name="AS",Display="Auto Surfing",Type=EditorType.CheckBox,Default=true},

                };
            }
        }


        public override void Start()
        {

            Title = "adbtc.top|DO|YOUH|You|Please solve the";

            SuccessXPath = "//p[@class='white-text flow-text']";
            FailXPath = "//a[@class='btn-large light-blue darken-4']";
            ErrorCount=0;
            base.Start();
        }


        public override bool IsLoggedIn()
        {

           bool Logged= ElementByXPath("//a[contains(@href,'logout')]") != null;
            if ( Logged )
            {
                ErrorCount=0;

            }
            return Logged;
        }


        public override int BeforeLogin()
        {
            if (Driver.Url != "https://adbtc.top/")
            {
                GoToUrl("https://adbtc.top/");
                Wait();
            }
          
            CheckCloudFlare ( );

            var GotoLogin = ElementByXPath("//a[@class='btn-large lime accent-2 black-text']");
            if (!IsVisible(GotoLogin))
            {
                return Fail("Go to login is not visible");
            }
            Click(GotoLogin);
            Wait();

            return base.BeforeLogin();
        }
          
        private void CheckCloudFlare ( )
         {
            if(IsVisible(ElementByXPath( "//h1[@data-translate='challenge_headline']" ) ))
            {

                var result=DoSolveCaptcha();
                if ( result>0 )
                {
                    return;
                }

                RecaptchaUtility recaptchaUtility=new RecaptchaUtility(this);
                recaptchaUtility.DoSolve ( );
                Wait ( 1 );

            }
        }
        public override int DoLogin()
        {

            var AddressBox = ElementByXPath("//input[@id='email']");
            if (!IsVisible(AddressBox))
            {
                return Fail("Fail To login address box is not visible");
            }
            var PasswordBox = ElementByXPath("//input[@id='password']");
            if (!IsVisible(PasswordBox))
            {
                return Fail("Fail login");
            }

            int result = DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail Solving captcha");
            }

            SetText(AddressBox, GetSetting("User"));
            SetText(PasswordBox, GetPassword("Pass"));
            Wait(1);

            var ButtonLogin = ElementByXPath("//input[@class='btn-large light-blue darken-4']");
            if (!IsVisible(ButtonLogin))
            {
                return Fail("Fail, button login is not visible");
            }
            Click(ButtonLogin);

            
            var ErrorBox = ElementByXPath("//div[@class='col s12 red']//p");
            if (IsVisible(ErrorBox))
            {
                Log(ErrorBox.Text);
                ErrorCount++;
                if ( ErrorCount>3 )
                {
                    Log ( "Cookies/cache problem detected, the browser will be closed" );
                    Driver.Manage ( ).Cookies.DeleteAllCookies ( );
                    Quit ( );
                    Context.CleanBrowserDataNow ( );
                }
            }
            //This faucet has nothing to do here. We will let Faucet Collector handle it.
            return base.DoLogin();
        }
        public int ErrorCount { get; set; }
        public static string ConvertImageToBase64String(Bitmap image_)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                image_.Save(ms, ImageFormat.Jpeg);
                return Convert.ToBase64String(ms.ToArray());
            }
        }
        public bool Solve_MathCaptcha_()
        {

            bool IsSolved = true;
            try
            {
                List<IWebElement> Captchas = ElementsByXPath("//img[contains(@src,'adbtc.top/1captcha')]").Where(x => IsVisible(x)).ToList();
                if (Captchas.Count == 2)
                {
                    Bitmap[] Captchas__ = new Bitmap[2];
                    Captchas__[0] = TakeScreenshot(Base.Captcha.CaptchaService.Manual, Captchas[0]);
                    Captchas__[1] = TakeScreenshot(Base.Captcha.CaptchaService.Manual, Captchas[1]);

                    DoubleMathCaptchaCuter cuter = new DoubleMathCaptchaCuter(Captchas__[0], Captchas__[1], true);

                    string Base64 = ConvertImageToBase64String(cuter.DoInitCut());
                    string Fullbase = "data:image/png;base64,";
                    ExecuteScript("arguments[0].setAttribute('src','" + Fullbase + Base64 + "');", Captchas[0]);
                    Wait();
                    var TextBoxCaptcha = ElementsByXPath("//input[@type='text' and not(contains(@id,'captcha')) and not(contains(@id,'number'))]").Where(x => IsVisible(x)).LastOrDefault();
                    if (IsVisible(TextBoxCaptcha))
                    {
                        int result = DoSolveImageCaptcha(Captchas[0], TextBoxCaptcha);
                        if (result > 0)
                        {
                            Log("Captcha Incorrectly resolved");
                            Driver.Navigate().Refresh();
                            Wait(2);
                            return Solve_MathCaptcha_();
                        }
                        else if (!IsANumber(Context.CaptchaResult.Result))
                        {
                            Log("Captcha is not a digit trying again");
                            FlagCaptchaAsInvalid();
                            Driver.Navigate().Refresh();
                            Wait(2);
                            return Solve_MathCaptcha_();

                        }
                    }
                    else
                    {
                        Log("TextBox captcha is not visible");
                        return false;
                    }
                }
                else
                {
                    Log("Double captcha is not visible");
                    Driver.Navigate().Refresh();
                    return false;
                }

            }
            catch (Exception ex)
            {
                Log(ex.ToString());
                IsSolved = false;
            }
            return IsSolved;

        }

        public override int GetFaucetWaitTime()
        {
            var finish = ElementByXPath("//*[contains(text(),'You watched all websites for now.')]");
            if (IsVisible(finish))
            {

                return GetWaitSetting();
            }
            return 0;
        }
        public override int BeforeSolveFaucet()
        {
            var surf = ElementByXPath("//a[@href='https://adbtc.top/surf/rotator']//li[contains(@class,'collection-item')]");
            if (!IsVisible(surf))
            {
                return Fail("Go to ad area button is not visible");
            }
            Click(surf);
            return base.BeforeSolveFaucet();
        }
        public override int DoSolveFaucet()
        {
            bool Finished = false;
            Wait(3);
            int ErrorCount = 0;
            do
            {
                Wait(2, 3);
                var b = ElementByXPath("//h5[@class='red-text']");
                if (IsVisible(b))
                {
                    Log(b.Text);

                }
                // View for the site failed , skipping it.
                var ButtonSkip = ElementByXPath("//a[contains(@href,'/surf/skip') and contains(@class,'valign-wrapper red white-text btn center animated btn-large jello')]");
                if (IsVisible(ButtonSkip))
                {
                    Log("Add Skiped, Refreshing site");
                    Click(ButtonSkip);
                    Wait(2);
                }
                // We need to solve captcha
                var ButtonSubmitCaptcha = ElementByXPath("//input[@type='submit']");
                if (IsVisible(ButtonSubmitCaptcha))
                {
                    var result = DoSolveCaptcha();
                    if (result > 0)
                    {
                        ErrorCount++;
                        if (ErrorCount > 3)
                        {
                            break;
                        }
                        Driver.Navigate().Refresh();
                        Wait(1);
                        continue;
                    }
                    else
                    {
                        ErrorCount = 0;
                    }
                    Wait();
                    // Since that when we switch the captcha the site is refreshed we will need to update the element before click the button.
                    ButtonSubmitCaptcha = ElementByXPath("//input[@type='submit']");
                    if (IsVisible(ButtonSubmitCaptcha))
                    {
                        Click(ButtonSubmitCaptcha);
                    }

                }
                else
                {

                    // We finished viewing all ads
                    var finish = ElementByXPath("//*[contains(text(),'You watched all websites for now.')]");
                    if (IsVisible(finish))
                    {
                        Finished = true;
                        CheckFaucetResult();

                    }
                    //We  are ready to see the ad
                    else
                    {
                        var bt = ElementByXPath("//*[contains(@class,'col') and contains(@class,'nopad offset')]//a[contains(@class,'btn')]");
                        if (IsVisible(bt))
                        {
                            try
                            {
                                ErrorCount = 0;
                                CheckForPopupsEnabled = false;
                                // Unique .click 
                                var Reward = ElementsByXPath("//b[contains(text(),'satoshi')]").Where(x => IsVisible(x)).LastOrDefault();
                                if (Reward != null)
                                {
                                    Log("Viewing ad you will be credited with " + Reward.Text);
                                }

                                Click(bt, false);
                                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                                DateTime t1 = DateTime.Now.AddMinutes(3);
                                Wait(5);
                                while (IsVisible(ElementByXPath("//div[@class='preloader-wrapper big active']")))
                                {
                                    Wait();
                                    if (DateTime.Now > t1)
                                    {
                                        break;

                                    }
                                }
                            }
                            finally
                            {
                                Wait(2);
                                CheckForPopupsEnabled = true;
                                CheckForPopups();
                            }
                        }
                        else
                        {
                            ErrorCount++;
                            Log("Something is wrong Button to see ad isn't visible, Probably there is a problem with the site or we already have finished view the ads");
                            Wait(5);
                            if (ErrorCount >= 2)
                            {
                                Log("We finished view of the ads");
                                break;
                            }
                        }

                    }

                }
            } while (!Finished);


            if (GetBoolSetting("SA"))
            {
                var GotoSurfAds = ElementByXPath("//a[@href='http://adbtc.top/surftab/inf']");
                if (IsVisible(GotoSurfAds))
                {
                    Click(GotoSurfAds);
                }
                else
                {
                    GoToUrl("http://adbtc.top/surftab/inf");
                }
                Wait(2);
                var ads = ElementsByXPath("//a[@class='open']").Where(x => IsVisible(x)).ToList();
                Log(ads.Count.ToString() + " Active ads detected");
                int n = 0;
                int CountErrors = 0;
                while (ads.Count > n && CountErrors <= 3)
                {
                    try
                    {


                        CheckForPopupsEnabled = false;
                        Click(ads[n], false);
                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                        Wait();
                        DateTime t1 = DateTime.Now.AddSeconds(60);
                        while (!IsVisible(ElementByXPath("//div[contains(text(),'Please choose')]")))
                        {
                            Wait(4);
                            if (t1 < DateTime.Now)
                            {
                                break;
                            }
                            var Tmr = ElementByXPath("//span[@id='tmr']");
                            if (IsVisible(Tmr))
                            {
                                Log(Tmr.Text);
                            }
                        }
                        Wait();
                        bool solved = SolveIcons();
                        if (!solved)
                        {
                            CountErrors++;
                        }
                        Wait(3);
                        if (IsVisible(ElementByXPath("//span[@id='tmr']")))
                        {
                            n++;
                        }
                    }
                    catch (Exception)
                    {
                        CheckForPopupsEnabled = true;
                        CheckForPopups();
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                        CountErrors++;
                        n++;
                    }
                    finally
                    {
                        CheckForPopupsEnabled = true;
                        CheckForPopups();
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                        if (Driver.Url.Contains("http://adbtc.top/surftab/inf"))
                        {
                            Driver.Navigate().Refresh();
                        }
                        else
                        {
                            GoToUrl("http://adbtc.top/surftab/inf");
                        }
                        Wait(3);
                        ads = ElementsByXPath("//a[@class='open']").Where(x => IsVisible(x)).ToList(); ;
                    }
                }
            }

            Wait();
            if (GetBoolSetting("AS"))
            {
                try
                {
                    var GotoAutoSurf = ElementByXPath("//a[@href='http://adbtc.top/autosurf/inf']");
                    if (IsVisible(GotoAutoSurf))
                    {
                        Click(GotoAutoSurf);
                    }
                    else
                    {
                        GoToUrl("http://adbtc.top/autosurf/inf");


                    }
                    Wait();
                    var button = ElementByXPath("//a[@id='start']");
                    if (IsVisible(button))
                    {
                        CheckForPopupsEnabled = false;
                        Click(button, false);
                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                    }
                    Wait(1);
                    DateTime t1 = DateTime.Now.AddMinutes(5);
                    while (IsVisible(ElementByXPath("//span[@id='tmr']")) && !IsVisible(ElementByXPath("//h5[contains(text(),'You watched all websites for now. Please, come bac')]")))
                    {
                        Wait(4, 6);
                        if (DateTime.Now > t1)
                        {
                            break;
                        }
                    }
                    Wait(5);

                }
                catch (Exception)
                {

                }
                finally
                {
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                }

            }


            if (GetBoolSetting("D"))
            {
                Log("Ads finished");
                Disable();
            }
            return GetWaitSetting();

        }

        private bool UseMath
        {
            get
            {
                return GetBoolSetting ( "UseMath" );
            }
        }
        public override int DoSolveCaptcha()
        {
            bool UseMath=this.UseMath;
            bool NeedChange= !(IsVisible ( ElementByXPath ( "//img[contains(@src,'adbtc.top/1captcha')]" ) )==UseMath);

            var SwitchCaptcha = NeedChange?ElementByXPath("//input[contains(@class,'select-dropdown')]"):null;
            if (IsVisible(SwitchCaptcha) )
            {
                string ActualCaptchaValue=SwitchCaptcha.GetAttribute("value");
                Click(SwitchCaptcha);
                Wait(1);

                var SelectCaptcha=ElementByXPath("//ul[contains(@id,'select-options')//span[not(contains(text(),'"+ActualCaptchaValue+"'))]");          
                if (SelectCaptcha != null)
                {
                    Click(SelectCaptcha);
                }
            }

            if (IsVisible(ElementByXPath("//img[contains(@src,'adbtc.top/1captcha')]")))
            {
                return Solve_MathCaptcha_() ? 0 : 1;
            }

            return base.DoSolveCaptcha();
        }
        public bool SolveIcons()
        {
            try
            {
             var capt = ElementsByXPath("//img[contains(@src,'/icons/')]");

                Wait();
                Bitmap[] icons = new Bitmap[capt.Count];

                for (int i = 0; i < capt.Count; i++)
                {
                    icons[i] = TakeScreenshot(Base.Captcha.CaptchaService.Manual, capt[i]);               

                }
                Wait();
                int result = 0;
                bool enc = false;
                for (int i = 0; i < 3 && !enc; i++)
                {
                    for (int j = i + 1; j < 4 && !enc; j++)
                    {
                        bool result_ = CompareImage(icons[i], icons[j]);
                        if (result_)
                        {
                            result = i;
                        }
                    }

                }
                Click(capt[result]);
                return true;
            }
            catch (Exception ex)
            {
                Log(ex.ToString());
            }
            return false;
        }
        private bool CompareImage(Bitmap image1, Bitmap image2)
        {
            for (int i = 0; i < image1.Height; i++)
            {
                for (int j = 0; j < image1.Width; j++)
                {
                    if (!SameColor(image1.GetPixel(j, i), image2.GetPixel(j, i), 100))
                    {
                        return false;
                    }
                }
            }
            return true;
        }
        private bool SameColor(Color c1, Color c2, double thre)
        {
            int r = c1.R - c2.R;
            int g = c1.G - c2.G;
            int b = c1.B - c2.B;
            if (r * r + g * g + b * b > thre * thre)
            {
                return false;
            }
            return true;
        }
        private static bool IsANumber(string number)
        {
            return number.All(x => char.IsDigit(x));
        }
    }

}
