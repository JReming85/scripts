
//==================//
//script Written by: ••AviramDayan•• 13/11/2019 09:00AM - Version 1
//Last Update: 25/11/2019 09:00AM - Version 2
//==================//

using System;
using System.Drawing;
using FaucetCollector.Script;
using System.Threading.Tasks;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

//css_inc recaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha

public class FairMillions : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the mdogeods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://Wolf.Bet/")
            {
                new FaucetSetting(){Name="Email",Display="UserName",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},

                new FaucetSetting() { Name = "btc", Display = "btc - claim", Type = EditorType.CheckBox, Default =true},
                new FaucetSetting() { Name = "LimitFaucet", Display = "LimitFaucet - write the full number of satoshi without point/decimals - 0.0 | 1.1 and etc (for example write: 100 200)", Type = EditorType.Numeric, Default = 1 },

				new FaucetSetting() { Name = "Rain_AirDrop_Chat", Display = "Rain_AirDrop_Chat - ON/OFF", Type = EditorType.CheckBox, Default = false},		
                new FaucetSetting(){Name="MessageChat",Display="Your Message In Chat - only need to be active to get any rain",Default = ".",Type=EditorType.TextBox,Required=false},

				new FaucetSetting() { Name = "7_Day_Streak", Display = "7_Day_Streak - ON/OFF", Type = EditorType.CheckBox, Default = true},		
				new FaucetSetting() { Name = "AutoAffiliate", Display = "AutoAffiliate - ON/OFF", Type = EditorType.CheckBox, Default = false},		



            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Fair Millions";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
	
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath ("//button[@name='header-toggle-menu']") != null; //Profile Menu in Top
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

        //if we already login go to here
        GoToUrl("https://www.Wolf.Bet/");

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
 public override int DoLogin()
 {
	
  var ExitButton = ElementByXPath ("//button[@name='header-toggle-menu']");

  //if i NOT Login - go to Login Page
  if (!IsVisible(ExitButton))
  {

        GoToUrl("https://www.Wolf.Bet/");
        Wait();		
        Wait(2);

        var StartOpenLogin = ElementByXPath("//button[@name='header-login']");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}
	
		Wait(2);
		
        var box_user = ElementByXPath("//input[@name='Username']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='Password']");
        SetText(box_pass, GetPassword("Password"));

		Wait(4);
		
        var ButtonLog = ElementByXPath("//button[@name='login-submit']");
        Click(ButtonLog);
		
		Wait(4);
		
        var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/bframe' | 'recaptcha/api2/anchor')]");  // ("//iframe[contains(@src,'recaptcha/api2/anchor')]")
        if (IsVisible(RecaptchaOpen_Iframe))
		{
        //SolveCaptcha if apper
        var result = base.DoSolveCaptcha();
        RecaptchaUtility utility = new RecaptchaUtility(this);
        utility.DoSolve();
		}

/*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
*/		
		Wait();	

  } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {

    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {
	
        GoToUrl("https://www.Wolf.Bet/");
		Log("Go to faucet");	
		Wait();


		//==============//
		//AutoAffiliate//
		//==============//	

        if (GetBoolSetting("AutoAffiliate"))
        {
        GoToUrl("https://wolf.bet/user/affiliate?tab=funds");
		Log("Go to AutoAffiliate");	
		Wait();
		
         var ClaimAffiliate = ElementByXPath("//button[@class='button']");
	     if (IsVisible(ClaimAffiliate))
	     { 
         Click(ClaimAffiliate);
         Log("Click ClaimAffiliate");
		 }
			
		}// AutoAffiliate
		//==============//
	
	
		//==============//
		//7_Day_Streak//
		//==============//	

        if (GetBoolSetting("7_Day_Streak"))
        {  

        var MenuGeneral = ElementByXPath("//button[@name='header-toggle-menu']");
	    if (IsVisible(MenuGeneral))
	    { 
        Click(MenuGeneral);
        Log("Click MenuGeneral");
		}
	
		Wait(2);

        var StreakTab = ElementByXPath("//button[@name='header-dailyStreak']");
	    if (IsVisible(StreakTab))
	    { 
        Click(StreakTab);
        Log("Click StreakTab");
		}
	
		Wait(2);
		
        var StreakActive = ElementByXPath("//div[contains(@class,'daily-streak--box')]/div[contains(@class,'element__active')]");
	    if (IsVisible(StreakActive))
	    { 
        Click(StreakActive);
        Log("Click StreakActive");
		}
	
		Wait(2);
		
        Driver.Navigate().Refresh();

		Wait();
		
		}// 7_Day_Streak
		//==============//
	
	
		//==============//
		//Rain_AirDrop_Chat//
		//==============//	

        if (GetBoolSetting("Rain_AirDrop_Chat"))
        {  
         RainAirDropChat_Function(); //call to RainAirDropChat_Function
         Wait(2);		 
		}// Rain_AirDrop_Chat
		//==============//


		//======//
		//btc//
		//======//
        if (GetBoolSetting("btc"))
        {	
		  Log("btc - try to claim");	
          Faucet_Function(); //call
		  
	      Wait();
	      Wait(2);

		}
        //=====//	

		ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        //return GetWaitSetting();	
	
        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This mdogeod gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet mdogeods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start mdogeod)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }


        //=========//
        //Faucet_Function
		//=========//
        public int Faucet_Function()
        {	
		
           //click on MainMenu
           var MainMenu = ElementByXPath("//button[@name='header-toggle-menu']");
           if (IsVisible(MainMenu)) 
           {
            Click(MainMenu);
            Log("click on MainMenu ");
           }
		
           Wait();	
           Wait(2);

	       Log("LimitFaucet - the balance under 0 < good");

           OpenFaucetTab_Faunction(); // call to open faucet tab

		   var TimerRun = ElementByXPath("//p[contains(text(),'must be empty')] "); 
           if (!IsVisible(TimerRun)) //if "TimerRun" NOT visible
		   {		
	   
             Wait();	
             Wait(2);

             var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/bframe' | 'recaptcha/api2/anchor')]");  // ("//iframe[contains(@src,'recaptcha/api2/anchor')]")
             if (IsVisible(RecaptchaOpen_Iframe))
		     {
             //SolveCaptcha if apper
             var result = base.DoSolveCaptcha();
             RecaptchaUtility utility = new RecaptchaUtility(this);
             utility.DoSolve();
		     }
			 
             Wait(4);
			 
		     var ButtonFaucet = ElementByXPath("//button/span[contains(text(),'Claim')] | //button/span[contains(text(),'claim')]"); 
	         Click(ButtonFaucet);
			 
		   } //end if TimerRun
		  
         return 0;
		}//end Faucet_Function
		//=========//
		
		
		
        //=========//
        //OpenFaucetTab_Faunction
		//=========//
        public void OpenFaucetTab_Faunction()
        {	
	       Log("click on FaucetTab");
           var FaucetTab = ElementByXPath("//button[@name='header-faucet']");
           Click(FaucetTab);
		   
		}//end OpenFaucetTab_Faunction
		//=========//
	


    //===========//
    //RainAirDropChat_Function//
    //===========//
    public void RainAirDropChat_Function()
    {	

		   Log("Rain_AirDrop_Chat: Go to bonus Chat");	
		   
           var ChatAlready_Open = ElementByXPath("//div[@class='chat-wrapper box-no-height chat-english']"); //ChatAlready_Open
           var ChatAlready_Close = ElementByXPath("//div[@class='chat-wrapper box-no-height chat-english chat-wrapper--hidden']"); //ChatAlready_Close

           if (IsVisible(ChatAlready_Close))
           {
           var ChatButton = ElementByXPath("//div[@class='chat-toggle']"); //ChatAlready_Close
           Click(ChatButton);
		   Log("Rain_AirDrop_Chat: click on ChatAlready_Close - to open the chat");
		   } 	
		   
           if (IsVisible(ChatAlready_Open))
           {
			Log("Rain_AirDrop_Chat: ChatAlready_Open");
		   }   
   
	       Wait();
		   Wait(2);	
		   
           var ChatInput_VAR = ElementByXPath("//textarea[@class='input']"); //ChatInput_VAR
           SetText(ChatInput_VAR, GetSetting("MessageChat"));
		   
	       Wait();
		   Wait(2);			   

           Driver.Navigate().Refresh(); //RefrashPage	

           Wait();
           Wait(2);				   
		   
    }
    //=========//
	

	
} //end public class
