using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using FaucetCollector.Script;

public class FreeBitcoinScript_ : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://freebitco.in/")
            {
                //We have a setting to get the email address used for freebitcoin
                new FaucetSetting() { Name = "Email", Display = "Email", Type = EditorType.TextBox, Required = true },
                //And we also need the password
                new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true },
				//Option to use Double Captcha or reCAPTCHA
                new FaucetSetting(){Name="PWC",Display="Play without captcha (if you have enough RP)",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="PWCR",Display="Play Without captcha max points to waste",Type=EditorType.TextBox,Default=20},
                new FaucetSetting() { Name = "UseDoubleCaptcha", Display = "Use DoubleCaptcha", Type = EditorType.CheckBox, Default = false },
                
                //Allow the user to select an auto redeem option
                new FaucetSetting(){Name="BtcBonus",Type=EditorType.TextBox,Display="AutoRedeemBtc only if my points >=", Default=0},
                new FaucetSetting() {
                    Name = "AutoRedeemBtc",
                    Display = "Auto redeem BTC BONUS",
                    Type = EditorType.ComboBox,
                    Items = new List<string>
                    {
                        "None",
                        "1000% BTC Bonus",
                        "500% BTC Bonus",
                        "100% BTC Bonus",
                        "50% BTC Bonus",
                        "10% BTC Bonus",
                    },
                    Default = "None"
                },
                 new FaucetSetting(){Name="PointBonus",Type=EditorType.TextBox,Display="AutoRedeemPoints only if my points >=", Default=0},
                new FaucetSetting(){

                      Name = "AutoRedeemPoint",
                    Display = "Auto redeem Point Bonus",
                    Type = EditorType.ComboBox,
                    Items = new List<string>
                    {
                        "None",
                        "100 Reward Points / Roll",
                        "50 Reward Points / Roll",
                        "25 Reward Points / Roll",
                        "10 Reward Points / Roll",
                        "1 Reward Point / Roll",
                    },
                    Default = "None"

                },
                new FaucetSetting(){Name="TicketBonus",Type=EditorType.TextBox,Display="AutoRedeemTicket only if my points >=", Default=0},
                new FaucetSetting()
                {

                      Name = "AutoRedeemTicket",
                    Display = "Auto redeem Ticket Bonus",
                    Type = EditorType.ComboBox,
                    Items = new List<string>
                    {
                        "None",
                        "100 Tickets / Roll",
                        "50 Tickets / Roll",
                        "25 tickets / roll",
                        "10 Tickets / Roll",
                        "1 Tickets / Roll",
                    },
                    Default = "None"

                },
            };
        }
    }

    public override void Start()
    {
        //Title that shows in the browser. Is used to close popups
        Title = "freebitco.in";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*[@id='free_play_result']";
        FailXPath = "//*[@id='free_play_error']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //If there is a visible element time_remaining or free_play_form_button then we are logged in.     
        return IsVisible(ElementById("time_remaining")) || IsVisible(ElementById("free_play_form_button"));
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //click on the Login menu item
        ExecuteScript("$('.login_menu_button').click();");

        //let Faucet Collector continue.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        //Find the input field that holds the email address
        var signInEmail = ElementByXPath("//input[@name='btc_address']");
        if (!IsVisible(signInEmail))
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin email input not found.");
        }

        var signInPassword = ElementById("login_form_password");
        if (!IsVisible(signInPassword))
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin password input not found.");
        }

        //Email and password input found, update the value of the input with the email address and password the user entered in Faucet Collector
        SetText(signInEmail, GetSetting("Email"));
        SetText(signInPassword, GetPassword("Password"));

        //Now we search for the login submit button
        var loginButton = ElementById("login_button");
        if (!IsVisible(loginButton))
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }

        //We are ready to click the login button.
        Click(loginButton);

        Wait(1);

        var Error = ElementByXPath("//p[@class='center reward_point_redeem_result_box reward_point_redeem_result_error']//span[@class='reward_point_redeem_result']");
        if (IsVisible(Error))
        {

            Log(Error.Text);
            if (Error.Text.ToLower().Contains("incorrect login details"))
            {
                Log("You need to put correct credentials");
                Disable();
            }
            else if(Error.Text.ToLower().Contains("please check your email inbox for a link to authorize your login request."))
            {
                Log("Please Check your email and autorize your login");

                return 450;
            }


        }

        //Let Faucet Collector continue
        return base.DoLogin();
    }

    public override int GetFaucetWaitTime()
    {
        var timerCheck = ElementById("time_remaining");
        if (!IsVisible(timerCheck))
        {
            //no time remaining element, so we are good to go.
            return 0;
        }

        var minutes = Convert.ToString(ExecuteScript("return $('#time_remaining .countdown_amount')[0].innerText"));
        var seconds = Convert.ToString(ExecuteScript("return $('#time_remaining .countdown_amount')[1].innerText"));
        if (string.IsNullOrEmpty(seconds) || string.IsNullOrEmpty(minutes))
        {
            return 0;
        }

        var min = Convert.ToInt32(minutes.Trim());
        var sec = Convert.ToInt32(seconds.Trim());
        //return the total wait time in seconds
        return (min * 60) + sec;
    }

    /// <summary>
    /// This method is called right before a captcha will be solved.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //select the right option for captcha

        var ButtonSwitch = GetBoolSetting("UseDoubleCaptcha") ?
            ElementByXPath("//div[@id='switch_captchas_button' and contains(@onclick,'double_captchas')]")
            : ElementByXPath("//div[@id='switch_captchas_button' and contains(@onclick,'recaptcha')]");


        if (IsVisible(ButtonSwitch))
        {
            Click(ButtonSwitch);
            Wait();

        }


        //Let Faucet Collector continue
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //Double captcha Solve
        var DoubleCaptchaImg = ElementsByXPath("//div[@class='captchasnet_captcha_content']").Where(x=>IsVisible(x)).ToList();
        var DoubleCaptchaBox = ElementsByXPath("//input[@class='captchasnet_captcha_input_box']").Where(x => IsVisible(x)).ToList();

        if (DoubleCaptchaImg.Count > 0 && DoubleCaptchaBox.Count==DoubleCaptchaImg.Count)
        {
            List<Task<int>> TaskList = new List<Task<int>>();
            
            for(int i = 0; i < DoubleCaptchaImg.Count; i++)
            {
                int aux = i;
                TaskList.Add(Task.Run(() =>
                {
                        return DoSolveImageCaptcha(DoubleCaptchaImg[aux], DoubleCaptchaBox[aux]);                  
                })
                );
                Wait(1);
            }

            Task.WhenAll(TaskList);

            return TaskList.Select(x => x.Result).Sum();
         }
        //Recaptcha Solve
        if (IsVisible(ElementByXPath("//div[@class='g-recaptcha']")))
        {
            return base.DoSolveCaptcha();
        }

        //Not captcha visible
        return 0;
    }


    /// <summary>
    /// Easy manage setting of Redem Setting
    /// </summary>
    class RedemSetting
    {

        public RedemSetting(string Setting)
        {
            this.Setting = Setting;
        }
        /// <summary>
        /// Setting in the script
        /// </summary>
        public string Setting { get; set; }
        /// <summary>
        /// Redem Javascript function name
        /// </summary>
        public enum RedemType
        {
            Points,
            Btc,
            Lottery
        }
        public string RedemName
        {
            get
            {
                return GetAutoRedeemName(Setting);
            }
        }



        /// <summary>
        /// Points required to redem that bonus
        /// </summary>
        public int PointsRequired
        {
            get
            {
                return GetPointsRequired(Setting);
            }
        }

        public RedemType Type
        {
            get
            {
                return Setting.ToLower().Contains("points") ? RedemType.Points : Setting.ToLower().Contains("btc") ? RedemType.Btc : RedemType.Lottery;
            }
        }

        private string GetAutoRedeemName(string autoRedeem)
        {
            if (autoRedeem == null)
            {
                return null;
            }
            switch (autoRedeem.ToLower())
            {
                case "100 reward points / roll":
                    return "free_points_100";
                case "50 reward points / roll":
                    return "free_points_50";
                case "25 reward points /roll":
                    return "free_points_25";
                case "10 reward points / roll":
                    return "free_points_10";
                case "1 reward point / roll":
                    return "free_points_1";
                case "1000% btc bonus":
                    return "fp_bonus_1000";
                case "500% btc bonus":
                    return "fp_bonus_500";
                case "100% btc bonus":
                    return "fp_bonus_100";
                case "50% btc bonus":
                    return "fp_bonus_50";
                case "10% btc bonus":
                    return "fp_bonus_10";
                case "100 tickets / roll":
                    return "free_lott_100";
                case "50 tickets / roll":
                    return "free_lott_50";
                case "25 tickets / roll":
                    return "free_lott_25";
                case "10 tickets / roll":
                    return "free_lott_10";
                case "1 tickets / roll":
                    return "free_lott_1";

            }

            return null;
        }
        private int GetPointsRequired(string autoRedeem)
        {
            if (autoRedeem == null)
            {
                return 0;
            }
            switch (autoRedeem.ToLower())
            {
                case "100 reward points / roll":
                    return 1200;
                case "50 reward points / roll":
                    return 600;
                case "25 reward points /roll":
                    return 300;
                case "10 reward points / roll":
                    return 120;
                case "1 reward point / roll":
                    return 12;
                case "1000% btc bonus":
                    return 3200;
                case "500% btc bonus":
                    return 1600;
                case "100% btc bonus":
                    return 320;
                case "50% btc bonus":
                    return 160;
                case "10% btc bonus":
                    return 32;
                case "100 tickets / roll":
                    return 1200;
                case "50 tickets / roll":
                    return 600;
                case "25 tickets / roll":
                    return 300;
                case "10 tickets / roll":
                    return 120;
                case "1 tickets / roll":
                    return 12;
            }

            return 0;
        }
    }
    /// <summary>
    /// Balance of the account
    /// </summary>
    public double AccountBalance
    {
        get {

            var BalanceBox = ElementByXPath("//span[@id='balance']");
            if (BalanceBox == null)
            {
                return -1;
            }
            double Balance;
            if (double.TryParse(BalanceBox.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out Balance))
            {
                return Balance;
            }
            return -1;

        }
    }
    /// <summary>
    /// Reward Points of the account
    /// </summary>
    public int RewardPoints
    {
        get
        {
            var RewardPointBox = ElementByXPath("//div[contains(@class,'user_reward_points')]");
            if (RewardPointBox == null)
            {
                return 0;
            }
            string RewardPointText = ExecuteScript("return arguments[0].textContent",RewardPointBox).ToString().Replace(",","");
      
            int Points;
           
            if (int.TryParse(RewardPointText, out Points))
            {

                return Points;
            }
            return 0;
        }

    }
    public int RequiredRollPoints
    {
        get
        {
            var PointsBox = ElementByXPath("//div[@id='play_without_captcha_desc']//span[@style='color:red;']");
            if (PointsBox == null)
            {
                return -1;
            }
            string PointBoxtext = ExecuteScript("return arguments[0].textContent", PointsBox).ToString().Replace(",", "");
          
            int Required;
            if (int.TryParse(PointBoxtext, out Required))
            {
                return Required;
            }

            return -1;
        }
    }




    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. 
    /// Next methods that will be called are DoSolveFaucet and AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {


        List<RedemSetting> ActualSettings = new List<RedemSetting> {

            new RedemSetting(GetSetting("AutoRedeemBtc")),
            new RedemSetting(GetSetting("AutoRedeemPoint")),
            new RedemSetting(GetSetting("AutoRedeemTicket")),
        }.Where(x=>x.RedemName!=null).ToList();
        

        for (int i = 0; i < ActualSettings.Count; i++)
        {
            if (IsClaimable(ActualSettings[i])) {

                string RedemScript = "RedeemRPProduct('"+ActualSettings[i].RedemName+"')";
                Log(ActualSettings[i].RedemName);

                ExecuteScript(RedemScript);

                var RedemResult = ElementByXPath("//span[@class='reward_point_redeem_result']", 3);
                if (IsVisible(RedemResult))
                {
                    Log("Result of redem bonus (" + Enum.GetName(typeof(RedemSetting.RedemType), (int)ActualSettings[i].Type) + ") Msg:  " + RedemResult.Text);

                }
                Wait(3);
            }
        }
        double Balance = AccountBalance;
        if (Balance != -1)
        {
            Log("Balance in the account is: " + Balance.ToString());
        }
        //Let Faucet Collector Continue.
        return base.BeforeSolveFaucet();
    }
    
    private bool IsClaimable(RedemSetting setting)
    {
        int RewardPoints = this.RewardPoints;
      
        return  setting.PointsRequired != 0 && setting.PointsRequired <= RewardPoints && !BonsuExist(setting.Type) && UserPointsRequeriment(setting.Type)<RewardPoints;

    }
    /// <summary>
    /// Get setting of that the user setted for the reward.
    /// </summary>
    /// <param name="type">Source RedeemSetting type</param>
    /// <returns></returns>
    private int UserPointsRequeriment(RedemSetting.RedemType type )
    {
        string SettingName=type==RedemSetting.RedemType.Btc?"BtcBonus":type==RedemSetting.RedemType.Points?"PointBonus":"TicketBonus";

        int Required;
        if(int.TryParse(GetSetting(SettingName),out Required ) )
        {
            return Required;
        }
        else
        {
            Log ( "There is a problem reading setting of points required for "+SettingName );
        }
        return int.MaxValue;
    }
    private bool BonsuExist(RedemSetting.RedemType type)
    {
       bool Exist= type == RedemSetting.RedemType.Btc ? ElementByXPath("//span[@id='bonus_span_fp_bonus']", 0) != null :
            type == RedemSetting.RedemType.Points ?
            ElementByXPath("//span[@id='bonus_span_free_points']", 0) != null :
            ElementByXPath("//span[@id='bonus_span_free_lott']", 0) != null;
   
        return Exist;

    }
    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>

    public override int DoSolveFaucet()
    {

        bool AvailableRollWithoutPoints = this.AvailableRollWithoutPoints;
        var ButtonSetClaimType = AvailableRollWithoutPoints ? ElementByXPath("//div[@id='play_without_captchas_button']") :ElementByXPath("//div[@id='play_with_captcha_button']");
        if (IsVisible(ButtonSetClaimType))
        {
            Click(ButtonSetClaimType);
            Wait();
        }

        var result = SolveCaptcha();
        if (result > 0)
        {
            return Fail("There is a problem with doing the captcha");
        }

        var ButtonClaim = ElementByXPath("//input[@id='free_play_form_button']");
        if (!IsVisible(ButtonClaim))
        {
            return Fail("Button to claim is not visible");
        }
        Click(ButtonClaim);


            //Let Faucet Collector continue its work
            return base.DoSolveFaucet();
    }
    public bool AvailableRollWithoutPoints
    {
        get
        {
            return GetBoolSetting("PWC") && RequiredRollPoints != -1 && RewardPoints >= RequiredRollPoints && MaxPointsWaste >= RequiredRollPoints;
        }
    }

    public int MaxPointsWaste { get { try
            {
                return Convert.ToInt32(GetSetting("PWCR"));

            }
            catch (Exception)
            {
                Log("There is a problem getting your max points, probably your setting is invalid");

            }
            return -1;

            }
    }

}