using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using FaucetCollector.Script;
//css_ref ImageProcessing.dll
using ImageProcessing.UsingColors;
using OpenQA.Selenium;

public class HitLink : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings ( "http://www.hitlink.com" )
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="N",Display="Nº claims (The bot will paused after do this number of surf)",Type=EditorType.TextBox,Default=10},
                new FaucetSetting(){Name="Play",Display="PlayBonusSurf",Type=EditorType.CheckBox,Default=false},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start ( )
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title="HitLink";
        StoreCookies=false;
        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath="//b[contains(text(),'Credited')]";
        FailXPath="//font[contains(text(),'You must add a site below before surfing')]";

        
        //Let Faucet Collector start up everything
        base.Start ( );
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit ( )
    {
        LoadImages ( );
        //Let Faucet Collector continue.
        return base.DoInit ( );
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn ( )
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath ( "//a[@href='members.php?mf=lo']" )!=null;
    }


    public override int DoLogin ( )
    {

        GoToUrl ( "https://www.hitlink.com/login.php?s=noauth" );

        Wait ( 1 );
        var UserBox = ElementByXPath("//input[@name='login']");
        if ( !IsVisible ( UserBox ) )
        {
            return Fail ( "User box not visilbe" );
        }

        var PasswordBox = ElementByXPath("//input[@name='password']");
        if ( !IsVisible ( PasswordBox ) )
        {
            return Fail ( "Password box is not visible" );
        }

        SetText ( PasswordBox , GetPassword ( "Pass" ) );
        SetText ( UserBox , GetSetting ( "User" ) );
        Wait ( 1 );

        var ButtonLogin = ElementByXPath("//input[@value='Login']");
        if ( !IsVisible ( ButtonLogin ) )
        {
            return Fail ( "Button is not visible" );
        }
        Click ( ButtonLogin );
        Wait ( 1 );



        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin ( );
    }

    public override int BeforeSolveFaucet ( )
    {

        GoToUrl ( "http://www.hitlink.com/surfing.php" );

        return base.BeforeSolveFaucet ( );
    }
    public override int DoSolveFaucet ( )
    {



        int cont = 0;
        Wait ( );
        int N_claims;
        try
        {
            N_claims=Convert.ToInt32 ( GetSetting ( "N" ) );
        }
        catch ( Exception )
        {
            N_claims=1000;
        }
        var surf = ElementByXPath("//input[@value='Start Surf']");
        if ( IsVisible ( surf ) )
        {
            Click ( surf );
        }

        Wait ( 4 );
        while ( cont<=N_claims )
        {
            try
            {
                // Log("INIT");
                Wait ( 2 , 3 );
                try {


                    if ( GetBoolSetting ( "Play" ) )
                    {

                        IWebElement color;
                        int rnd = Random(1, 3);
                        if ( rnd==1 ) {

                            color=ElementByXPath ( "//input[@type='image' and @value='red']|//input[@value='monster-red']" );
                        }
                        else if ( rnd==2 )
                        {
                            color=ElementByXPath ( "//input[@type='image' and @value='green']|//input[@value='monster-green']" );
                        }
                        else
                        {
                            color=ElementByXPath ( "//input[@type='image' and @value='blue']|//input[@value='monster-blue']" );

                        }
                        if ( IsVisible ( color ) )
                        {

                            Click ( color );
                            Wait ( );
                        }

                    }
                    else
                    {
                        var button = ElementByXPath("//input[@name='w2'");
                        if ( IsVisible ( button ) )
                        {
                            Click ( button );
                            Wait ( );
                        }
                    }


                }
                catch ( Exception )
                {

                }
                Wait ( );
                //Driver.SwitchTo().Frame(ElementByXPath("//frame[1]"));
                Wait ( );
                // Log("SWITCH");
                var Timer=ElementByXPath("//div[@id='timer']");
                DateTime timeout=DateTime.Now.AddSeconds(30);
                while ( IsVisible ( Timer )&&!Timer.Text.Contains ( "GO" )&&DateTime.Now<timeout )
                {
                    Wait ( );
                }


                bool solved = Solve_Image();
                //Log("SOLVED");
                Wait ( );
                if ( !solved )
                {
                    Driver.Navigate ( ).Refresh ( );
                    CheckForPopups ( );
                }

                var Success_=ElementByXPath(SuccessXPath);
                if ( IsVisible ( Success_ ) )
                {
                    Log ( Success_.Text );
                    cont++;
                }
            }
            catch ( Exception ex )
            {
                Log ( ex.ToString ( ) );
                cont++;
            }
            finally
            {

                Log ( "Surfing site Nº "+( cont+1 ).ToString ( ) );
            }

            if ( cont==N_claims )
            {
                Log ( cont.ToString ( )+" Succesfull Surfed sites" );
            }

        }


        CheckFaucetResult ( );

        return GetWaitSetting ( );




    }
    private Bitmap person { get; set; }
    private Bitmap world { get; set; }
    private Bitmap food { get; set; }

    private Bitmap animal {get;set;}

   private string assets_d
    {   get
        {

            return AssetDir ( "Other" )+"\\HitLink\\";
        } }

    
private bool LoadImages ( )
    {
        try
        {
            FileStream reader = new FileStream(assets_d + "world.png", FileMode.Open);
            world=new Bitmap ( Image.FromStream ( reader ) );

            reader.Close ( );
            reader=new FileStream ( assets_d+"person.png" , FileMode.Open );
            person=new Bitmap ( Image.FromStream ( reader ) );
            reader.Close ( );
            reader=new FileStream ( assets_d+"food.png" , FileMode.Open );
            food=new Bitmap ( Image.FromStream ( reader ) );
            reader.Close ( );
            reader=new FileStream ( assets_d+"animal.png" , FileMode.Open );
            animal=new Bitmap ( Image.FromStream ( reader ) );
            reader.Close ( );

        }
        catch ( Exception ex )
        {
            Log ( ex.ToString ( ) );
            return false;
        }
        return true;
    }


    private bool Solve_Image ( )
    {
  

        bool IsSolved = false;
        Bitmap[] icons = new Bitmap[5];
        icons[0]=TakeScreenshot ( Base.Captcha.CaptchaService.Manual , ElementByXPath ( "//img[contains(@src,'surficon.php?ts=')]" ) );

        Wait ( );
        var other_icons = ElementByXPath("//div[@id='myform']//td");
        Bitmap Principal_ = TakeScreenshot(Base.Captcha.CaptchaService.Manual, other_icons);

        for ( int i = 0 ; i*75<Principal_.Width ; i++)
        {
            icons[i+1]=Principal_.Clone ( new Rectangle ( i*75 , 0 , 75 , 75 ) , Principal_.PixelFormat );

        }


        List<MyImage> Types = new List<MyImage>
        {
            new MyImage ( icons[0] , Color.Blue ) ,// Main image

            new MyImage ( world , Color.Blue ) ,//World

            new MyImage ( person , Color.Blue ) ,//Person

            new MyImage ( food , Color.Blue ) ,//FOOD

            new MyImage ( animal , Color.Blue ) // IS ANIMAL
        };


        ImageProcessing.UsingColors.CorrectImageSelector CompareFirst = new  ImageProcessing.UsingColors.CorrectImageSelector (Types[0]);

        for ( int i = 1 ; i<5 ; i++ )
        {
            CompareFirst.AddNewSecundaryImg ( Types[i] );

        }
        CompareFirst.CalculatePosition ( );


        int type = CompareFirst.GetPosition()[0];

        int solution = -1;
        string Type_S=type==0?"world":type==1?"person":type==2?"food":"animal";
        List<CorrectImageSelector> SecondCompare = new List<CorrectImageSelector>();

        FileStream reader;
        for ( int j = 1 ; j<5 ; j++ )
        {

            SecondCompare.Add ( new CorrectImageSelector ( new MyImage ( icons[j] , Color.Blue ) ) );
            for ( int i = 1 ; i<=2 ; i++ )
            {


                reader=new FileStream ( assets_d+Type_S+i.ToString ( )+".png" , FileMode.Open );
                Bitmap tocomp = new Bitmap(Image.FromStream(reader));
                reader.Close ( );
                SecondCompare[j-1].AddNewSecundaryImg ( new MyImage ( tocomp , Color.Blue ) , true );

            }
        }

        int High = int.MinValue;
        for ( int i = 0 ; i<SecondCompare.Count ; i++ )
        {
            if ( SecondCompare[i].GetSpecificScore ( SecondCompare[i].GetPosition ( )[0] )>High )
            {
                solution=i;
                High=SecondCompare[i].GetSpecificScore ( SecondCompare[i].GetPosition ( )[0] );
            }
        }
        Log ( "Solution: "+solution.ToString ( ) );
        if ( solution!=-1 )
        {
            var elements = ElementsByXPath("//img[contains(@onclick,'return surfbar_click(')]");
            Click ( elements[solution] );
            IsSolved=true;
        }
        return IsSolved;
    }
}
