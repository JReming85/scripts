
//==================//
//script Written by: ••AviramDayan•• 26/05/2019 04:00PM - Version 1
//Last Update: 17/12/2019 03:00AM - Version 19
//==================//

using System;
using System.Drawing;
using FaucetCollector.Script;
using System.Threading.Tasks;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

//css_inc recaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha

public class luckyfishorg : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://luckyfish.io/")
            {
                new FaucetSetting(){Name="Email",Display="Email (Best to set email and NOT UserName - if you have security question in some point) ",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
				
                new FaucetSetting() { Name = "UserCustomTimeLimitFaucet_CheckBox", Display = "UserCustomTimeLimitFaucet - ON/OFF", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "UserCustomTimeLimitFaucet_input", Display = "UserCustomTimeLimitFaucet - if you claim multiple currency one after one, and you have a message to wait between each coin, so i recommended to set to 2 min (the default is 2 min) ", Type = EditorType.Numeric, Default = 2},

                new FaucetSetting() { Name = "AllCoinsFaucets", Display = "AllCoinsFaucets - ON/OFF", Type = EditorType.CheckBox, Default = true},	
				
                new FaucetSetting() { Name = "btc", Display = "btc - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "doge", Display = "doge - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "ltc", Display = "ltc - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "eth", Display = "eth - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "bch", Display = "bch - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "xlm", Display = "xlm - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "xrp", Display = "xrp - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "dash", Display = "dash - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "zec", Display = "zec - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "usdt", Display = "usdt - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "bsv", Display = "bsv - claim", Type = EditorType.CheckBox, Default = false},
                new FaucetSetting() { Name = "btg", Display = "btg - claim", Type = EditorType.CheckBox, Default = false},					
                new FaucetSetting() { Name = "eos", Display = "eos - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "link", Display = "link - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "bat", Display = "bat - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "omg", Display = "omg - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "hot", Display = "hot - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "ht", Display = "ht - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "usdc", Display = "usdc - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "tusd", Display = "tusd - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "pax", Display = "pax - claim", Type = EditorType.CheckBox, Default = false},	
			
                new FaucetSetting() { Name = "AffWithdraw", Display = "AffWithdraw", Type = EditorType.CheckBox, Default = false},	
	            new FaucetSetting(){Name="AllGames_Menu",Display="AllGames_Menu - Select Favorite Game (Correctly available only 'slots' Games)",Type=EditorType.ComboBox,Default="none",Items=new System.Collections.Generic.List<string>{"none","Slot - slotsOfAmerica","Slot - slotsOfChina","Slot - slotsOfOZ","Slot - slotsOfAlice","Slot - slotsOfRedHat","Slot - slotsOfCandy","Slot - slotsOfCinderella"}}, 
				new FaucetSetting(){Name="MenuDefaultCoin",Display="MenuDefaultCoin - Select Favorite Coin to play OR for general stuff",Type=EditorType.ComboBox,Default="btc",Items=new System.Collections.Generic.List<string>{"btc","doge","ltc","eth","bch","xlm","xrp","dash","zec","usdt","bsv","btg","eos","link","bat","omg","hot","ht","usdc","tusd","pax"}},

                new FaucetSetting(){Name="Slot_Amount",Display="Slot_Amount",Default = "0.00000001",Type=EditorType.TextBox,Required=false},
				new FaucetSetting() { Name = "Slot_Lines", Display = "Slot_Lines", Type = EditorType.Numeric, Default = 2},
				new FaucetSetting() { Name = "NumbersOfSpins", Display = "Numbers of Spins", Type = EditorType.Numeric, Default = 3},

            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "LuckyFish.io";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
	
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//img[@class='userPhoto']") != null;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

	 //var checks login or exit
     var ExitButton = ElementByXPath("//img[@class='userPhoto']");

	 
	 //if i already Login - go to "bonus"	 
	 if (IsVisible(ExitButton))
	 {
        //if we already login go to here
        GoToUrl("https://www.luckyfish.io/");
	 }	
	
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
      var ExitButton = ElementByXPath("//img[@class='userPhoto']");

	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://www.luckyfish.io/");
		Wait();		
		Wait(2);
     
        Login_General_Function(); //call

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
			Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {
        Title = "LuckyFish.io";
        GoToUrl("https://www.luckyfish.io/");
		Log("Go to home");	
		Wait();
		Wait(2);	
		
		
     //=============//
     //AffWithdraw
     //=============// 
     if (GetBoolSetting("AffWithdraw"))
     {
        Title = "Luckyfish Affiliate";
        GoToUrl("https://a.luckyfish.io/home/statistic");
		Wait();
		Wait(2);
		Log("AffWithdraw");		

        var StartOpenLogin = ElementByXPath("//div[@class='left' and contains(text(),'LOGIN')] | //button[@class='LogIn'] ");
	    if (IsVisible(StartOpenLogin))
	    { 
          Login_General_Function(); // call to Login_General_Function
		}
         
        var WithdrawTab = ElementByXPath("//li[@class='withDraw']");   
	    if (IsVisible(WithdrawTab))
	    { 
        Click(WithdrawTab);
		Log("WithdrawTab");
		}
        Wait();
        Wait(2);
		
        var Withdraw_2_Tab = ElementByXPath("//ul[@class='withdraw_menu']/li[contains(text(),'LUCKYFISH')]");   
	    if (IsVisible(Withdraw_2_Tab))
	    { 
        Click(Withdraw_2_Tab);
		Log("Withdraw_2_Tab");
		}	
		
        Wait(2);

        //do all stuff	
        MenuAFF_Faunction(); //call
        Wait(2);
        var btc_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[1]");  
        Click(btc_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - btc");	
        Wait(2);

        MenuAFF_Faunction(); //call	
        Wait(2);	
        var doge_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[2]");   
        Click(doge_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - doge");	
        Wait(2);

        MenuAFF_Faunction(); //call	
        Wait(2);	
        var ltc_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[3]");   
        Click(ltc_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - ltc");	
        Wait(2);

        MenuAFF_Faunction(); //call	
        Wait(2);	
        var eth_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[4]");   
        Click(eth_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - eth");		
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var bch_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[5]");  
        Click(bch_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - bch");		
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var xlm_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[6]");   
        Click(xlm_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - xlm");		
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var eos_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[7]");   
        Click(eos_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - eos");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var xrp_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[8]");   
        Click(xrp_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - xrp");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var dash_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[9]");   
        Click(dash_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call		
		Log("WithdrawEndButton - dash");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var zec_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[10]");   
        Click(zec_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - zec");			
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var usdt_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[11]"); 
        Click(usdt_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - usdt");			
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var bsv_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[12]");  
        Click(bsv_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - bsv");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var btg_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[13]"); 
        Click(btg_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - btg");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var bat_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[14]"); 
        Click(bat_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - bat");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var hot_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[15]"); 
        Click(hot_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - hot");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var link_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[16]"); 
        Click(link_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - link");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var omg_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[17]"); 
        Click(omg_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - omg");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var ht_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[18]"); 
        Click(ht_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - ht");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var usdc_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[19]"); 
        Click(usdc_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - usdc");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var tusd_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[20]"); 
        Click(tusd_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - tusd");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var pax_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[21]"); 
        Click(pax_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - pax");	
        Wait(2);

        MenuAFF_Faunction(); //call
        Wait(2);
        var trx_w_VAR = ElementByXPath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[22]"); 
        Click(trx_w_VAR);	
        Wait(2);
        WithdrawEndButton_Faunction(); //call	
		Log("WithdrawEndButton - trx");	
        Wait(2);
		
     }// end AffWithdraw
     //=============//
	 
	 


     //========//
     //faucet
     //========// 

     if (GetBoolSetting("AllCoinsFaucets"))
     {	

        Title = "LuckyFish.io";
        GoToUrl("https://www.luckyfish.io/");
		Log("Go to faucet");	
		Wait();
		Wait(2);	
		
		//======//
		//btc//
		//======//
        if (GetBoolSetting("btc"))
        {	
        FaucetButton_Function(); //call
	
        Menu_Function(); //call

	    Wait(2);

        var btc_VAR = ElementByXPath("//ul[contains(@class,'el-scrollbar__view')]/li[1 and contains(@icon,'btc')]"); //("//div[@x-placement='bottom-start']/div[1]/div[1]/ul/li[1]")
        if (IsVisible(btc_VAR))
        {		
		Log("btc");		
        Click(btc_VAR);
        }//end btc_VAR
		
	    Wait(2);
				
        SolveCaptcha_RightSquare_Function(); //call
	
	    Wait(2);
		
        Claim_Function(); //call

        if (GetBoolSetting("UserCustomTimeLimitFaucet_CheckBox"))
        {		
          var customTime = CustomReturn_Faunction();
          if (customTime > 0) 
          {
              return customTime;
          }	
        }// end  UserCustomTimeLimitFaucet_CheckBox	
		
		}// GetBoolSetting - btc
        //=========//	
	
		//======//
		//doge//
		//======//
        if (GetBoolSetting("doge"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var doge_VAR = ElementByXPath("//ul[contains(@class,'el-scrollbar__view')]/li[2 and contains(@icon,'doge')]");   
        if (IsVisible(doge_VAR))
        {	
		Log("doge");
        Click(doge_VAR);
        }//end doge_VAR
		
	    Wait(2);

        SolveCaptcha_RightSquare_Function(); //call
	
	    Wait(2);
		
        Claim_Function(); //call

        if (GetBoolSetting("UserCustomTimeLimitFaucet_CheckBox"))
        {		
          var customTime = CustomReturn_Faunction();
          if (customTime > 0) 
          {
              return customTime;
          }	 		
        }// end  UserCustomTimeLimitFaucet_CheckBox	
		
		}// GetBoolSetting - doge
        //=========//		
	
		//======//
		//ltc//
		//======//
        if (GetBoolSetting("ltc"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var ltc_VAR = ElementByXPath("//ul[contains(@class,'el-scrollbar__view')]/li[3 and contains(@icon,'ltc')]");   
        if (IsVisible(ltc_VAR))
        {	
		Log("ltc");			
        Click(ltc_VAR);
        }//end ltc_VAR
		
	    Wait(2);
				
        SolveCaptcha_RightSquare_Function(); //call
	
	    Wait(2);
		
        Claim_Function(); //call

        if (GetBoolSetting("UserCustomTimeLimitFaucet_CheckBox"))
        {		
          var customTime = CustomReturn_Faunction();
          if (customTime > 0) 
          {
              return customTime;
          }	 		
        }// end  UserCustomTimeLimitFaucet_CheckBox	
		
		}// GetBoolSetting - ltc
        //=========//		
			
		//======//
		//eth//
		//======//
        if (GetBoolSetting("eth"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var eth_VAR = ElementByXPath("//ul[contains(@class,'el-scrollbar__view')]/li[4 and contains(@icon,'eth')]");   
        if (IsVisible(eth_VAR))
        {	
		Log("eth");	
        Click(eth_VAR);
        }//end eth_VAR
		
	    Wait(2);
				
        SolveCaptcha_RightSquare_Function(); //call
	
	    Wait(2);
		
        Claim_Function(); //call

        if (GetBoolSetting("UserCustomTimeLimitFaucet_CheckBox"))
        {		
          var customTime = CustomReturn_Faunction();
          if (customTime > 0) 
          {
              return customTime;
          }	 		
        }// end  UserCustomTimeLimitFaucet_CheckBox	
		
		}// GetBoolSetting - etc
        //=========//				
			
		//======//
		//bch//
		//======//
        if (GetBoolSetting("bch"))
        {
        FaucetButton_Function(); //call
	
        Menu_Function(); //call

	    Wait(2);

        var bch_VAR = ElementByXPath("//ul[contains(@class,'el-scrollbar__view')]/li[5 and contains(@icon,'bch')]");   
        if (IsVisible(bch_VAR))
        {	
		Log("bch");
        Click(bch_VAR);
        }//end bch_VAR	
		
	    Wait(2);
				
        SolveCaptcha_RightSquare_Function(); //call
	
	    Wait(2);
		
        Claim_Function(); //call

        if (GetBoolSetting("UserCustomTimeLimitFaucet_CheckBox"))
        {		
          var customTime = CustomReturn_Faunction();
          if (customTime > 0) 
          {
              return customTime;
          }	 			
        }// end  UserCustomTimeLimitFaucet_CheckBox	
		
		}// GetBoolSetting - bch
        //=========//				
			
		//======//
		//dash//
		//======//
        if (GetBoolSetting("dash"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var dash_VAR = ElementByXPath("//ul[contains(@class,'el-scrollbar__view')]/li[6 and contains(@icon,'dash')]");   
        if (IsVisible(dash_VAR))
        {	
		Log("dash");
        Click(dash_VAR);
        }//end dash_VAR	
		
	    Wait(2);
				
        SolveCaptcha_RightSquare_Function(); //call
	
	    Wait(2);
		
        Claim_Function(); //call

        if (GetBoolSetting("UserCustomTimeLimitFaucet_CheckBox"))
        {		
          var customTime = CustomReturn_Faunction();
          if (customTime > 0) 
          {
              return customTime;
          }	 				
        }// end  UserCustomTimeLimitFaucet_CheckBox	
		
		}// GetBoolSetting - dash
        //=========//					
			
		//======//
		//zec//
		//======//
        if (GetBoolSetting("zec"))
        {
        FaucetButton_Function(); //call
	
        Menu_Function(); //call

	    Wait(2);

        var zec_VAR = ElementByXPath("//ul[contains(@class,'el-scrollbar__view')]/li[7 and contains(@icon,'zec')]");   
        if (IsVisible(zec_VAR))
        {	
		Log("zec");	
        Click(zec_VAR);
        }//end zec_VAR	
		
	    Wait(2);
				
        SolveCaptcha_RightSquare_Function(); //call
	
	    Wait(2);
		
        Claim_Function(); //call

        if (GetBoolSetting("UserCustomTimeLimitFaucet_CheckBox"))
        {		
          var customTime = CustomReturn_Faunction();
          if (customTime > 0) 
          {
              return customTime;
          }	 		 		
        }// end  UserCustomTimeLimitFaucet_CheckBox	
		
		}// GetBoolSetting - zec
        //=========//

		
     }// end AllCoinsFaucets 


	
 		 //================//
         //Menus Vars AllGames
		 //================//
         //AllGames_Menu
         var AllGames_Menu_Var = GetSetting("AllGames_Menu");  	
		
		 //AllGames - none	
		 if(AllGames_Menu_Var=="none")
         {
			//we return after specific time  
			Log("AllGames: none ");
            //ad = true; //we return after 55 min
		 }
		//===========================//

		 //Slot - slotsOfAmerica	
         if(AllGames_Menu_Var=="Slot - slotsOfAmerica")
         {		
          Log("Slot - slotsOfAmerica");
		  
	      GoToUrl("https://luckyfish.io/slotsOfAmerica");		
		
          Wait();	
          Wait(3);				
          
		  AllSlotsGames_Function(); //call 

         }//end Slot - slotsOfAmerica
         //=======================//	

		 //Slot - slotsOfChina	
         if(AllGames_Menu_Var=="Slot - slotsOfChina")
         {		
          Log("Slot - slotsOfChina");
		  
	      GoToUrl("https://luckyfish.io/slotsOfChina");		
		
          Wait();	
          Wait(3);				
          
		  AllSlotsGames_Function(); //call 

         }//end Slot - slotsOfChina
         //=======================//	

		 //Slot - slotsOfOZ	
         if(AllGames_Menu_Var=="Slot - slotsOfOZ")
         {		
          Log("Slot - slotsOfOZ");
		  
	      GoToUrl("https://luckyfish.io/slotsOfOZ");		
		
          Wait();	
          Wait(3);				
          
		  AllSlotsGames_Function(); //call 

         }//end Slot - slotsOfOZ
         //=======================//	

		 //Slot - slotsOfAlice	
         if(AllGames_Menu_Var=="Slot - slotsOfAlice")
         {		
          Log("Slot - slotsOfAlice");
		  
	      GoToUrl("https://luckyfish.io/slotsOfAlice");		
		
          Wait();	
          Wait(3);				
          
		  AllSlotsGames_Function(); //call 

         }//end Slot - slotsOfAlice
         //=======================//	

		 //Slot - slotsOfRedHat	
         if(AllGames_Menu_Var=="Slot - slotsOfRedHat")
         {		
          Log("Slot - slotsOfRedHat");
		  
	      GoToUrl("https://luckyfish.io/slotsOfRedHat");		
		
          Wait();	
          Wait(3);				
          
		  AllSlotsGames_Function(); //call 

         }//end Slot - slotsOfRedHat
         //=======================//	

		 //Slot - slotsOfCandy	
         if(AllGames_Menu_Var=="Slot - slotsOfCandy")
         {		
          Log("Slot - slotsOfCandy");
		  
	      GoToUrl("https://luckyfish.io/slotsOfCandy");		
		
          Wait();	
          Wait(3);				
          
		  AllSlotsGames_Function(); //call 

         }//end Slot - slotsOfCandy
         //=======================//	

		 //Slot - slotsOfCinderella	
         if(AllGames_Menu_Var=="Slot - slotsOfCinderella")
         {		
          Log("Slot - slotsOfCinderella");
		  
	      GoToUrl("https://luckyfish.io/slotsOfCinderella");		
		
          Wait();	
          Wait(3);				
          
		  AllSlotsGames_Function(); //call 

         }//end Slot - slotsOfCinderella
         //=======================//	

		ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        //return GetWaitSetting();	
	
	
        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }



     //=============//
     //Login_General_Function
     //=============// 
      public int Login_General_Function()
      {

        var StartOpenLogin = ElementByXPath("//div[@class='left' and contains(text(),'LOGIN')] | //button[@class='LogIn'] ");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}

		Wait(2);
		
        var box_user = ElementByXPath("//input[@placeholder='Username']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@placeholder='Password']");
        SetText(box_pass, GetPassword("Password"));
		
		Wait(2);
/*		
       //SolveCaptcha if apper
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
*/		
		Wait(4);
		
        var ButtonLog = ElementByXPath("//button[@class='el-button el-button--primary is-plain']");
        Click(ButtonLog);
		
		Wait(5);
		
        var SecurityQuestion = ElementByXPath("//h2[@class='loginTwoFactor_title' and contains(text(),'SECURITY')]");
	    if (IsVisible(SecurityQuestion))
	    { 
        var box_2_user = ElementByXPath("//div[@class='loginTwoFactor_input']/input"); //diffrent
        SetText(box_2_user, GetSetting("Email"));
		Wait(2);
        var Button_2_Log = ElementByXPath("//div[@class='loginTwoFactor_button']");
        Click(Button_2_Log);
		}
		
		Wait(2);
				
/*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
*/		
		Wait();
		
	    return 0;
		
      } //end Login_General_Function
     //=============// 
	 


        //=========//
        //FaucetButton_Function
		//=========//
        public void FaucetButton_Function()
        {	
        var ButtonLog = ElementByXPath("//li[@class='left faucet']/span[@class='iconfont']");
        Click(ButtonLog);
		
		Wait(2);		
		}//end FaucetButton_Function
		//=========//
		
		
        //=========//
        //Claim_Function
		//=========//
        public void Claim_Function()
        {			
        Log("Claim_Function");
		
        var CheckboxRequired = ElementByXPath("//span[@class='el-checkbox__inner'] ");   
	    if (IsVisible(CheckboxRequired))
	    { 
		Log("CheckboxRequired");
		Click(CheckboxRequired);
		}
		
		Wait(2);
		
        var ClaimVAR = ElementByXPath("//div[@class='claim true']");   
        if (IsVisible(ClaimVAR))
        {	
        Log("Claim_Function");	
        Click(ClaimVAR);
        }//end ClaimVAR
		
		}//end Claim_Function
		//=========//
		

    public bool SeeIfThereisColor(Bitmap Image)
    {
        bool ContainsColor = false;
        for(int i = 0; i < Image.Width && ! ContainsColor; i++)
        {
            for(int j = 0; j < Image.Height; j++)
            {
                if(Image.GetPixel(i,j)!=Color.FromArgb(0,0,0) && Image.GetPixel(i,j)!=Color.FromArgb(255, 255, 255))
                {
                    ContainsColor = true;
                    break;
                }
            }
        }

        return ContainsColor;

    }
	
	
    private IWebElement FindCorrectArrow()
    {
        var Arrows = ElementsByXPath("//div[@class='verify-gap']");
        int n = 0;
        foreach(var arrow in Arrows)
        {
            if(SeeIfThereisColor(TakeScreenshot(Base.Captcha.CaptchaService.Manual,arrow)))
            {
                Log("Element is" + n.ToString());
                return arrow;

            }
            n++;

        }
        return null;

    }
	

        //=========//
        //SolveCaptcha_RightSquare_Function
		//=========//
        public void SolveCaptcha_RightSquare_Function()
        {	
		
        Log("SolveCaptcha_RightSquare_Function");
		
        /*
        GetestCaptchaUtilities.GetestCaptcha getestCaptcha = new GetestCaptchaUtilities.GetestCaptcha(this);
        bool res2=  getestCaptcha.DoInitSolve();
        */

        var Arrow = FindCorrectArrow();
        if(IsVisible(Arrow))
		{
            Log("SolveCaptcha_RightSquare_Function - Arrow");	

            var ToMove = ElementByXPath("//div[@class='verify-sub-block']");
            if (IsVisible(ToMove))
            {
                Log("SolveCaptcha_RightSquare_Function - ToMove");	
                Actions actions = new Actions(Driver);
                actions.DragAndDrop(ToMove, Arrow).Build().Perform();
                Wait();

			}
        }
	
		}// end SolveCaptcha_RightSquare_Function
		//=========//


       //=============//
       //MenuAFF_Faunction
       //=============// 
        public void MenuAFF_Faunction()
        {
        var MenuCoins = ElementByXPath("//div[@class='currency_content']/div[@class='el-select']");   
        Click(MenuCoins);	
        Log("MenuCoins - Affiliate");
		}// end MenuAFF_Faunction
		//=============// 
		
        //=========//
        //Menu_Function
		//=========//
        public void Menu_Function()
        {	
        Log("Menu_Function");		
        var MenuVAR = ElementByXPath("//div[1]/div[2]/div/div[1]/div/div[contains(@class,'el-input el-input--suffix')]");       			
        Click(MenuVAR);
        Log("MenuCoins - General Home");
		}//end Menu_Function
		//=========//

       //=============//
       //MenuCoins_2_Faunction
       //=============// 
        public void MenuCoins_2_Faunction()
        {
        var MenuCoins = ElementByXPath("//div[2]/div[1]/div/div[contains(@class,'el-input el-input--suffix')]");  //different
        Click(MenuCoins);
        Log("MenuCoins - Faucet");
		}// end MenuCoins_2_Faunction
		//=============// 
		
		
     //=============//
     //WithdrawEndButton_Faunction
     //=============// 
      public int WithdrawEndButton_Faunction()
      {

        var balance = ElementByXPath("//div[@class='available_balance_content']");
        string BalanceSTRING = balance.Text.Trim().Split('.')[1];
        int BalanceINT = Convert.ToInt32(BalanceSTRING);

        if (BalanceINT < 1) 
        {
            Log("Affiliate - < Under - not good ");
        }

        if (BalanceINT > 1) 
        {
        Log("Affiliate - > Above - good do stuff");
		
        var WithdrawEndButton = ElementByXPath("//div[@class='withdraw_to_luckyfish_btn']/div[@class='button']"); 
        Click(WithdrawEndButton);
        Log("Affiliate - WithdrawEndButton");
		
        Wait();
        Wait(2);
		
        var box_user = ElementByXPath("//div[@class='el-dialog__body']/input[@type='text']");
        SetText(box_user, GetSetting("Email"));
        Log("Affiliate - set Email");
	
		Wait(2);
		
        var box_pass = ElementByXPath("//div[@class='el-dialog__body']/input[@type='password']");
        SetText(box_pass, GetPassword("Password"));
        Log("Affiliate - set Password");
		
		Wait(2);
		
        var ConfirmButton = ElementByXPath("//span[@class='dialog-footer']/button[@class='el-button el-button--primary']"); 
        Click(ConfirmButton);
        Log("Affiliate - ConfirmButton");
		
        Wait();
		
        } //end > Above

        return 0;

      }// end WithdrawEndButton_Faunction
      //=============// 	


 
       //=============//
       //CustomReturn_Faunction
       //=============// 
        public int CustomReturn_Faunction()
        {
			
        var TextTimeError = ElementByXPath("//p[@class='el-message__content' and contains(text(),'Please') ] "); 
	    if (IsVisible(TextTimeError))     
	    {
		 Log("return UserCustomTimeLimitFaucet");
         int MyCustomTimeINT;
         MyCustomTimeINT = GetIntSetting("UserCustomTimeLimitFaucet_input") * 60; 
         return MyCustomTimeINT;
	    }		
		
		 return 0; // *importent* (otherwise it will not working)
		 
		}// end CustomReturn_Faunction
		//=============// 



      //=============//
      //Menu_HomeMainCoinsChoose_Faunction
      //=============// 
      public void Menu_HomeMainCoinsChoose_Faunction()
      {

       var MenuCoinsVAR = GetSetting("MenuDefaultCoin"); 
	  
       if(MenuCoinsVAR=="btc")
       {			
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var btc_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[1]");  
        Click(btc_w_VAR);
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="doge")
       {		   
        MenuCoins_2_Faunction(); //call	
        Wait(2);	
        var doge_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[2]");   
        Click(doge_w_VAR);	
        Wait(2);
       }

       if(MenuCoinsVAR=="ltc")
       {	   
        MenuCoins_2_Faunction(); //call	
        Wait(2);	
        var ltc_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[3]");   
        Click(ltc_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="eth")
       {	   
        MenuCoins_2_Faunction(); //call	
        Wait(2);	
        var eth_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[4]");   
        Click(eth_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="bch")
       {  
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var bch_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[5]");  
        Click(bch_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="xlm")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var xlm_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[6]");   
        Click(xlm_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="xrp")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var eos_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[7]");   
        Click(eos_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="dash")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var xrp_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[8]");   
        Click(xrp_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="zec")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var dash_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[9]");   
        Click(dash_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="usdt")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var zec_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[10]");   
        Click(zec_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="bsv")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var usdt_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[11]"); 
        Click(usdt_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="btg")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var bsv_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[12]");  
        Click(bsv_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="eos")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var btg_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[13]"); 
        Click(btg_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="link")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var bat_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[14]"); 
        Click(bat_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="bat")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var hot_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[15]"); 
        Click(hot_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="omg")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var link_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[16]"); 
        Click(link_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="hot")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var omg_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[17]"); 
        Click(omg_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="ht")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var ht_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[18]"); 
        Click(ht_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="usdc")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var usdc_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[19]"); 
        Click(usdc_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="tusd")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var tusd_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[20]"); 
        Click(tusd_w_VAR);	
        Wait(2);
       }
	   
       if(MenuCoinsVAR=="pax")
       { 	   
        MenuCoins_2_Faunction(); //call
        Wait(2);
        var pax_w_VAR = ElementByXPath("//div[contains(@class,'mySelectCurrency')]//li[21]"); 
        Click(pax_w_VAR);	
        Wait(2);
       }
	   
      } // end Menu_HomeMainCoinsChoose_Faunction
	   


       //=============//
       //AllSlotsGames_Function
       //=============// 
        public void AllSlotsGames_Function()
        {

        Menu_HomeMainCoinsChoose_Faunction(); // call to main Menu_HomeMainCoinsChoose_Faunction to Choose default coin

		Wait();		
		Wait(2);			
        var HotKeys_Start = ElementByXPath ("//span[@class='iconfont four']");  
	    if (IsVisible(HotKeys_Start))     
	    {
        Click(HotKeys_Start);
        Log("HotKeys_Start");		
		}
		
		Wait();		
		Wait(2);
		
        var HotKeys_Enable = ElementByXPath ("//span[@class='el-switch__label el-switch__label--right is-active']");  
        var HotKeys_Disable = ElementByXPath ("//span[@class='el-switch__label el-switch__label--right']");        
		var HotKeys_Button = ElementByXPath ("//span[@class='el-switch__core']");  
		var HotKeys_CloseWindow = ElementByXPath ("//span[@class='el-switch__core']");  

	    if (IsVisible(HotKeys_Enable)) //if already active 
	    {
         Log("HotKeys_Enable - already acrive/Enable");	
		}		

	    if (IsVisible(HotKeys_Disable)) //if already active 
	    {
         Click(HotKeys_Button); 
         Log("HotKeys_Disable - Clice on the HotKeys_Button to Enable the HotKeys");
		}	
		
		//Wait(2);
	    //Click(HotKeys_CloseWindow); 
        //Log("HotKeys_CloseWindow");
		
		Wait();			
		Wait(2);	
		
		Driver.Navigate().Refresh();
		
		Wait(2);

        var Slot_Amount_VAR = ElementByXPath("//input[@id='bet_amount']") ; //Slot_Amount - default set to 0.00000001
        SetText(Slot_Amount_VAR, GetSetting("Slot_Amount"));
        Log("Slot_Amount_VAR");		
		
		Wait(1);

        var AlretMessage_Minimum = ElementByXPath("//p[contains(text(),'Sorry,The min bet is')]");
	    if (IsVisible(AlretMessage_Minimum)) //if already active 
	    {
		Driver.Navigate().Refresh();
		Wait();
		Wait(7);
		Actions Builder2Act = new Actions(Driver);
        Builder2Act.SendKeys("s").Build().Perform();  // "d" - Min Bet | "s" - Double Bet | "a" - Half Bet
        Log("SendKeys - s - min bet");
		}	

		Wait(5);
		
        var Slot_Lines_VAR = ElementByXPath("//input[@id='numHands']") ; //Slot_Lines - default set to 2
        SetText(Slot_Lines_VAR, GetSetting("Slot_Lines"));					
        Log("Slot_Lines_VAR");

		Wait(3);	

		//=============//
        //NumbersOfSpins
		//=============//
        int Claims;      
        Claims = Convert.ToInt32(GetSetting("NumbersOfSpins"));
        int Count = 0;

        while (true)
	    {
		  Count++; //important to put Count++ in start - Count OR store - Similar to the clock begins to count	
		  Wait(2);	
          Log("spin"+Count);	

		  Actions BuilderAct = new Actions(Driver);
          BuilderAct.SendKeys(Keys.Space).Build().Perform(); //click space to spin
          Log("SendKeys - Space - click to spin");	
		
          if (Count >= Claims) 
	      {	
	       Log("break");	
	       break; //after break the while
	      }

        } //end  while (true)		
		//=============//

		Wait(5);	
		
		}// end AllSlotsGames_Function
		//=============// 	




	
} //end public class
