using FaucetCollector.Script;
using System.Collections.Generic;
using System.Linq;
//css_inc RecaptchaUtilities
//css_inc BaseUtility
class FlyFaucetScript : FaucetScript
{
    private string BaseUrl
    {
        get
        {
            string Selected=GetSetting("Faucet");
            if ( AvailableFaucets.ContainsKey ( Selected ) )
            {
                return AvailableFaucets[Selected];
            }

            return AvailableFaucets.Values.FirstOrDefault ( );

        }
    }
    private string FaucetUrl {
        
        get { 
           
            return BaseUrl+"free"; 
        
        }
    
    }

    private readonly Dictionary<string,string> AvailableFaucets=new Dictionary<string,string>
    {
        {"DASH","https://fly-dash.com/" },
        {"LTC","https://fly-ltc.com/" },
        {"DOGE", "https://fly-doge.com/"  },
        {"BTC","https://fly-btc.com/" }
    };
    public override FaucetSettings Settings
    {
        get

        {

            return new FaucetSettings ( "about:blank" )
            {
                new FaucetSetting()
                {
                Name="User",
                Type=EditorType.TextBox,
                Required=true,
                Display="Email"


                },
                new FaucetSetting ( )
                {
                    Name="Pass",
                    Type=EditorType.Password,
                    Required=true,
                    Display="Password"
                },
                new FaucetSetting
                {
                    Name="Faucet",
                    Type=EditorType.ComboBox,
                    Default=AvailableFaucets.Keys.FirstOrDefault(),
                    Items=AvailableFaucets.Keys.ToList()
                }
                

            };
        }

    }

    public override void Start ( )
    {
        TryGetCallback=true;
        SuccessXPath="//h3[@id='info' and @style='color: green;']";

        FailXPath="//h3[@id='info']";

        Title="DASH";
        
        base.Start ( );

        Url=BaseUrl;
        
    }

    public override int DoInit ( )
    {
        GoToUrl ( Url );
        return base.DoInit ( ); 
    }

    public override int BeforeLogin ( )
    {
        var TryAgain=ElementByXPath("//a[contains(text(),'Try again')]");
        if ( IsVisible ( TryAgain ) )
        {
            Click ( TryAgain );
            Wait ( 1 );
        }

        var ButtonSignIn=ElementByXPath("//a[@href='#mySignin']");
        if(!IsVisible(ElementByXPath( "//div[@id='mySignin']" ) ) && IsVisible(ButtonSignIn ))
        {
            Click ( ButtonSignIn );
            Wait ( 1 );
        }
        return base.BeforeLogin ( );
        
    }
    private bool TryGetCallback { get; set; }
    public override int DoSolveCaptcha ( )
    {
        int result=base.DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }
        if ( TryGetCallback )
        {
            RecaptchaUtility utility=new RecaptchaUtility(this);
            utility.DoSolve ( );
        }
        else
        {
            TryGetCallback=true;
        }


        return result;
    }
    public override int DoLogin ( )
    {

        if ( !Driver.Url.Contains ( BaseUrl ) )
        {
            GoToUrl ( BaseUrl );
            Wait ( 2 );
        }
        var UserBox=ElementByXPath("//input[@id='inputText']");
        if ( !IsVisible ( UserBox ) )
        {
            return Fail ( "User box not visible" );
        }
        SetText ( UserBox , GetSetting ( "User" ) );

        var PasswordBox=ElementByXPath("//input[@id='inputSigninPassword']");
        if ( !IsVisible ( PasswordBox ) )
        {
            return Fail ( "Password box not visible" );
        }
        SetText ( PasswordBox , GetPassword ( "Pass" ) );

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }
       
        var ButtonLogin=ElementByXPath("//button[@class='btn btn-lg btn-primary btn-sm text-center g-recaptcha']");
        if ( IsVisible ( ButtonLogin ) )
        {
            ExecuteScript ( "onSubmit('"+Context.CaptchaResult.Result+"')" );
            Wait ( 1 );
        }
       

        var FailLogin=ElementByXPath("//a[contains(text(),'Try again')]");
        if ( IsVisible ( FailLogin ) )
        {
            Log ( "Login Failed:"+ FailLogin.Text );
        }

        return base.DoLogin ( );
    }

    public override bool IsLoggedIn ( )
    {

        return ElementByXPath ( "//a[@href='/logout']" )!=null;
    }

   
    public override int DoSolveFaucet ( )
    {
        string FaucetUrl=this.FaucetUrl;

        if ( Driver.Url!=FaucetUrl )
        {
            GoToUrl ( FaucetUrl );

            Wait ( 2 );
        }

        var ButtonClaim=ElementByXPath("//button[@class='btn text-center g-recaptcha']");
        if ( !IsVisible ( ButtonClaim ) )
        {
            return Fail ( "There is a problem with button claim" );
        }

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }

        Wait (  );
     

        var ButtonRoll=ElementByXPath("//button[@id='buttonroll']",10);

        if ( !IsVisible ( ButtonRoll ) )
        {
            return Fail ( "Button roll not found" );
        }


        TryGetCallback=false;
        result=DoSolveCaptcha ( );

            if ( result>0 )
            {
                return Fail ( "Fail solving 2nd captcha" );
            }

            Click ( ButtonRoll );

        Wait ( 3,4 );


        
        return base.DoSolveFaucet ( );
    }



    public override int GetFaucetWaitTime ( )
    {
        if ( Driver.Url!=FaucetUrl )
        {
            GoToUrl ( FaucetUrl );
            Wait ( 2 );
        }

        var timer=ElementByXPath("//span[@id='utimer']");

        if ( IsVisible ( timer ) )
        {
            int M,S;

            var Splited=timer.Text.ToLower().Replace(".","").Replace("m","").Replace("s","").Split(' ');

            if(int.TryParse(Splited[0],out M) && int.TryParse(Splited[1],out S ) )
            {
                return M*60+S;
            }

        }

        return base.GetFaucetWaitTime ( );
    }
}

