using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
//css_ref HumanActions.dll;
using HumanActions;
public class freeLitecoinScript : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.free-litecoin.com/")
            {
                new FaucetSetting() { Name = "Email", Display = "Email Address", Type = EditorType.TextBox, Required = true },
                new FaucetSetting() { Name = "Pass", Display = "password", Type = EditorType.Password, Required = true },
                
            };
        }
    }

    public override void Start()
    {
        Title = "Free-Litecoin.com";
        
        SuccessXPath = "//h2[@id='info']";
        FailXPath = "//h1[@id='numberroll' and contains(@style, 'red')]";

        base.Start();
    }

    public override bool IsLoggedIn()
    {

        return ElementByXPath("//a[contains(@href,'logout.php')]")!=null;
    }

    public override int BeforeLogin()
    {


        return base.BeforeLogin();
    }

    public override int DoLogin()
    {
		 DriverHumanActions humanActions=new DriverHumanActions(Driver);
        var signInUser = ElementById("usr");
        if (!IsVisible(signInUser))
        {
            Driver.Manage ( ).Cookies.DeleteAllCookies ( );
            return Fail("Email input not found.");
        }

        var signInPassword = ElementById("usr2");
        if (!IsVisible(signInPassword))
        {

            return Fail("Password input not found.");
        }

        humanActions.SetText(signInUser, GetSetting("Email"));
        Wait(1);
        humanActions.SetText(signInPassword, GetPassword("Pass"));

        var loginButton = ElementByXPath("//button[@class='btn btn-primary btn-lg']");
        if (!IsVisible(loginButton))
        {
 
            return Fail("Login button not found.");
        }

        Wait(1);

        //Solve the captcha
        var result = SolveCaptcha();
        if (result > 0)
        {

            return result;
        }

       Wait(1);


        humanActions.Click(loginButton);


        return base.DoLogin();
    }

	public void HumanClick ( IWebElement element )
    {
        Actions actions =new Actions(Driver);

        actions.MoveToElement ( element , element.Size.Width/2 , element.Size.Height/2 ).Build ( ).Perform ( );
        Wait (1 );
        actions.Click ( ).Build ( ).Perform ( );

    }
	
    public override int AfterLogin()
    {
		var body = ElementByXPath("//body");
		
		Wait();
		//open the popup
		Click(body);
		
        return base.AfterLogin();
    }

    public override int GetFaucetWaitTime()
    {
        var timerCheck = ElementById("clock");
        if (!IsVisible(timerCheck))
        {
            //no time remaining element, so we are good to go.
            return 0;
        }

        var minutes = Convert.ToString(ExecuteScript("return $('#clock .countdown_amount')[0].innerText"));
        var seconds = Convert.ToString(ExecuteScript("return $('#clock .countdown_amount')[1].innerText"));
        if (string.IsNullOrEmpty(seconds) || string.IsNullOrEmpty(minutes))
        {
            return 0;
        }

        var min = Convert.ToInt32(minutes.Trim());
        var sec = Convert.ToInt32(seconds.Trim());
        //return the total wait time in seconds
        return (min * 60) + sec;
    }

    public override int BeforeSolveCaptcha()
    {

        return base.BeforeSolveCaptcha();
    }

    public override int DoSolveCaptcha()
    {

	    if ( ElementByXPath ( "//div[contains(@class,'g-recaptcha')]" )==null )
        {
            return 0;
        }
		
        return base.DoSolveCaptcha();
    }

    public override int AfterSolveCaptcha()
    {

        return base.AfterSolveCaptcha();
    }




    public override int BeforeSolveFaucet()
    {
	

        return base.BeforeSolveFaucet();
    }



//============//
//DoSolveFaucet//
//============//
    public override int DoSolveFaucet()
    {
	
        GoToUrl("https://www.free-litecoin.com");
        Wait();
        var rollNumberBtn = ElementByXPath("//button[@id='roll']");
        if (!IsVisible(rollNumberBtn))
        {
            return Fail("Roll number not visible.");
        }

        //Solve the captcha
        var result_2 = DoSolveCaptcha();
        if (result_2 > 0)
        {
           return Fail("fail not solve"); //if something wrong
        }
        Wait();
        Click(rollNumberBtn);
		
        return base.DoSolveFaucet();
    }
//============//
//DoSolveFaucet//
//============//




    public override int AfterSolveFaucet()
    {

        return base.AfterSolveFaucet();
    }



    public override int CheckFaucetResult()
    {
        var result = base.CheckFaucetResult();
        if (IsSuccess)
        {

            Reload = true;
        }

        return result;
    }

}
