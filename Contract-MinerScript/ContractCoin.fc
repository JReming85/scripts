using System;
using FaucetCollector.Script;
//css_inc RecaptchaUtilities
//css_inc ShortLinkUtilitiesV2
public class ContractMiner : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.contract-miner.com/?city=home&earn=paid-contracts")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="LoginW",Display="Login With",Type=EditorType.ComboBox,Items=new System.Collections.Generic.List<string>{"Solvemedia","Recaptcha"},Default="Recaptcha"},            
                new FaucetSetting(){Name="ContractN",Display="Contact Nº:",Type=EditorType.Numeric,Default=1},
                new FaucetSetting(){Name="TimedlyHour",Display="ClaimTimedlyHour",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="MinersTap",Display="MinersTap",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="AutoMiner",Display="AutoMiner_(0 Disabled)",Type=EditorType.Numeric,Default=0},
           
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Miner";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='alert alert-success']";
        FailXPath = "//div[@class='alert alert-danger']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {

        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(@href,'target=logout')]") != null;
    }
   
    public void CheckDailyAd()
    {
        if(IsVisible(ElementByXPath("//h5[contains(text(),'Daily Login Ad')]")))
        {
            var CloseDailyAd = ElementByXPath("//button[@name='close_daily_ad']");
            DateTime t1 = DateTime.Now.AddSeconds(15);
            while (!IsVisible(CloseDailyAd))
            {
                Wait();
                CloseDailyAd = ElementByXPath("//button[@name='close_daily_ad']");
                if (DateTime.Now > t1)
                {
                    break;
                }
            }
            Click(CloseDailyAd);
        }
    }
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        var Login = ElementByXPath("//a[contains(@href,'target=login')]");
        if ( IsVisible ( Login ) )
        {
            Click ( Login );
        }

        Wait (2);
        var LoginW = GetSetting("LoginW");
        if (LoginW == "Recaptcha")
        {
            if(!IsVisible(ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]")))
            {
                var SelectCaptchaButton = ElementByXPath("//a[@data-target='#change-captcha-solution']");
                if (IsVisible(SelectCaptchaButton))
                {
                    Click(SelectCaptchaButton);
                    Wait(1);
                    var SelectRecaptcha = ElementByXPath("//a[contains(text(),'ReCaptcha')]");
                    if (IsVisible(SelectRecaptcha))
                    {
                        Click(SelectRecaptcha);
                        Wait(1);
                    }
                }
            }
        }
           else
        {
            if (!IsVisible(ElementByXPath("//img[@id='adcopy-puzzle-image-image']")))
            {
                var SelectCaptchaButton = ElementByXPath("//a[@data-target='#change-captcha-solution']");
                if (IsVisible(SelectCaptchaButton))
                {
                    Click(SelectCaptchaButton);
                    Wait(1);
                    var SelectSolvemedia = ElementByXPath("//a[contains(text(),'SolveMedia')]");
                    if (IsVisible(SelectSolvemedia))
                    {
                        Click(SelectSolvemedia);
                        Wait(1);
                    }
                }
           }
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
      
        var UserBox = ElementByXPath("//input[@id='username']");
        if (!IsVisible(UserBox))
        {
            return Fail("User Box is not visible");
        }
        SetText(UserBox, GetSetting("User"));
        Wait(1);
        var PasswordBox = ElementByXPath("//input[@type='password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box is not visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
        Wait(1);
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        if (GetSetting("LoginW") == "Recaptcha")
        {
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
        }
        var KeepSign = ElementByXPath("//input[@name='remember_me_login']");
        if (IsVisible(KeepSign))
        {
            Click(KeepSign);
        }
        var button = ElementByXPath("//button[@class='btn btn-primary submit-btn btn-block']");
        if (!IsVisible(button))
        {
            return Fail("Button login is not visible");
        }
        Click(button);

        var Error = ElementByXPath("//div[@class='toast-message']");
        if (IsVisible(Error))
        {
            Log(Error.Text);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        CheckDailyAd();

        GoToUrl("https://www.contract-miner.com/?city=home&earn=paid-contracts");

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
   
    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (IsVisible(ElementByXPath("//h4[@id='Contract_Counter']")))
        {
            var counter = ElementByXPath("//h4[@id='Contract_Counter']");
            var CounterText = counter.Text.Split(':');
            int h = Convert.ToInt32(CounterText[0]) * 3600;
            int m = Convert.ToInt32(CounterText[1]) * 60;
            int s = Convert.ToInt32(CounterText[2]);
            return h + m + s;

        }
        else
        {
            return 0;
        }
      
       
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
      
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        int Number = GetIntSetting("AutoMiner");
        if (Number != 0)
        {
            GoToUrl("https://www.contract-miner.com/?city=home&earn=auto-miner");
            Wait(2);
            var ButtonComplete = ElementByXPath("//button[@name='am_captcha_solution']");
            if (IsVisible(ButtonComplete))
            {
                var result = DoSolveCaptcha();
                if (result > 0)
                {
                    Log("Fail in AutoMiner , captcha solution incorrect");
                }
                Wait(1);
                Click(ButtonComplete);
            }

            var ButtonClaim = ElementsByXPath("//button[@name='start_auto_miner']");
            if (ButtonClaim.Count > 0)
            {
                int CountClaim = ButtonClaim.Count >= Number ? Number - 1 : ButtonClaim.Count - 1;
                if (CountClaim >= 0)
                {
                    Click(ButtonClaim[CountClaim]);
                    Wait();
                }
            }
        }
        //button[@name='start_auto_miner']
        if (GetBoolSetting("MinersTap"))
        {
            Log("Into minerstap");
            bool Claim = true;
            try
            {
                DateTime D=Convert.ToDateTime(GetSetting("Actived15"));
                if (D.AddMinutes(15) > DateTime.Now)
                {
                    Claim = false;
                }
            }
            catch (Exception)
            {
                SetSetting("Actived15", DateTime.Now);
            }
            if (Claim)
            {
                GoToUrl("https://www.contract-miner.com/?city=home&app=miners-tap");
                Wait();
                var ShortlinkButton = ElementByXPath("//button[@id='generate_mt_end_shortener_cm']");
                if (IsVisible(ShortlinkButton))
                {
                    Click(ShortlinkButton);
                    Wait();
                    var ButtonGoto = ElementByXPath("//a[contains(text(),'Stay in same tab')]");
                    if (IsVisible(ButtonGoto))
                    {
                        Click(ButtonGoto);
                        DoTheInternalShort();
                    }
                    var ToastSucceded = ElementByXPath("//div[@class='toast toast-success']");
                    if (IsVisible(ToastSucceded))
                    {
                        Log(ToastSucceded.Text);
                    }
                }
                var ButtonClaim = ElementByXPath("//button[@name='mt_claim']");
                if (IsVisible(ButtonClaim))
                {
                    Click(ButtonClaim);
                    Wait();

                    SetSetting("Actived15", DateTime.Now); 
                    Log("Sucessfully activated");
                }

            }
                Wait();
              
            }
        

        if (GetBoolSetting("TimedlyHour"))
        {
          
            bool Claim = true;
            try
            {
               

                    DateTime time = Convert.ToDateTime(GetSetting("ActivedHour"));
                    if (DateTime.Now < time.AddHours(1))
                    {
                        Claim = false;
                    }


                
            }
            catch (Exception)
            {
                SetSetting("ActivedHour", DateTime.Now);
            }
            if (Claim)
            {
                GoToUrl("https://www.contract-miner.com/?city=home&app=hourly-pot");
                Wait();
                var ShortlinkButton = ElementByXPath("//button[@id='generate_mt_end_shortener_cm']");
                if (IsVisible(ShortlinkButton))
                {
                    Click(ShortlinkButton);
                    Wait();
                    var ButtonGoto = ElementByXPath("//a[contains(text(),'Stay in same tab')]");
                    if (IsVisible(ButtonGoto))
                    {
                        Click(ButtonGoto);
                        DoTheInternalShort();
                    }
                    var ToastSucceded = ElementByXPath("//div[@class='toast toast-success']");
                    if (IsVisible(ToastSucceded))
                    {
                        Log(ToastSucceded.Text);
                    }
                }
                Wait();
                var BeginClaim = ElementByXPath("//button[@name='hp_claim']");
                if (IsVisible(BeginClaim))
                {
                    Click(BeginClaim);
                    Wait();
                    var ActivedMhs = ElementByXPath("//span[@class='counter-number-related text-capitalize']");
                    if (IsVisible(ActivedMhs))
                    {
                        SetSetting("ActivedHour", DateTime.Now);
                        Log("Sucessfull actived" + ActivedMhs.Text.ToString() + "For one hour");
                    }


                }
            }
            else
            {
                Log("Claim of hourly pot not available");
            }
            
        }

        if (!Driver.Url.Contains("https://www.contract-miner.com/?city=home&earn=paid-contracts"))
        {
            GoToUrl("https://www.contract-miner.com/?city=home&earn=paid-contracts");
        }
        if (IsVisible(ElementByXPath("//button[@id='generate_end_auth']")))
        {
            TryUseShortlink();
          

            }
            var AlertFinished = ElementByXPath("//div[@class='alert alert-success']");
            if (IsVisible(AlertFinished))
            {
                Log(AlertFinished.Text);
            }
        
   
        //img[@id='adcopy-puzzle-image-image-captchaShortlink']

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveFaucet();
    }

    public int TryUseShortlink(int tries = 0)
    {
        if (tries > 4)
        {
            return Fail("Fail do shortlink");
        }
        var GenerateShort = ElementByXPath("//button[@id='generate_end_auth']");
        if (!IsVisible(GenerateShort))
        {
            return Fail("Generate ShortLink Button is not visible");
        }
        Click(GenerateShort);
        var ButtonStay = ElementByXPath("//a[contains(text(),'Stay in same tab')]");
        DateTime t1 = DateTime.Now.AddSeconds(15);
        while (!IsVisible(ButtonStay))
        {
            ButtonStay = ElementByXPath("//a[contains(text(),'Stay in same tab')]");
            Wait(1);
            if (DateTime.Now > t1)
            {
                break;
            }
        }
        if (!IsVisible(ButtonStay))
        {
            return Fail("Go to shortLink button is not visible");
        }

        Click(ButtonStay);
        Wait();
        if (!IsVisible(ElementByXPath("//input[@id='login_username']")))
        {
            DoTheInternalShort();
            Wait(1);
        }
        else
        {
            Log("Need login again, Try login.");
            BeforeLogin();
            DoLogin();
            GoToUrl(Url);
           return TryUseShortlink(tries+1);


        }

        return 0;
    }
  
    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        
        int NContract = GetIntSetting("ContractN", 1);
        var CreateContractButton = ElementsByXPath("//button[@name='create_paid_contract_submit']");
        if (CreateContractButton.Count > 0)
        {
            if (NContract > CreateContractButton.Count)
            {
                Click(CreateContractButton[CreateContractButton.Count - 1]);
            }
            else
            {
                Click(CreateContractButton[NContract - 1]);
            }
        }
        else
        {
            return Fail("Create Contract Button not found");
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    public bool DoTheInternalShort()
    {
        bool IsSolved = false;
       
            var Bypasser = new ShortLinkBypasser(this);
            IsSolved=Bypasser.DoShortLink();
        


        return IsSolved;

    }
    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
