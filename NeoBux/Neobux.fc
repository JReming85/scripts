using System;
using System.Drawing;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;
using Base.Captcha;
using System.Drawing.Drawing2D;

public class CannonBux_ : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.neobux.com/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="AdPrize",Display="View Adprize",Type=EditorType.CheckBox,Default=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "NeoBux";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//span[@class='sm']";
        FailXPath = "//div[@class='sm5555552']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        Driver.Manage().Cookies.DeleteAllCookies();
       
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@id='logoutBt']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        var login = ElementByXPath("//span[contains(text(),'Login')]");
        if (IsVisible(login))
        {
            Click(login);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        Wait();
        if (!Driver.Url.Contains("https://www.neobux.com/m/l"))
        {
            GoToUrl("https://www.neobux.com/m/l");
        }
        var LoginBox = ElementByXPath("//input[@id='Kf1']");
        if (!IsVisible(LoginBox))
        {
            return Fail("Login box not visible");
        }
        SetText(LoginBox, GetSetting("User"));
        var PassBox = ElementByXPath("//input[@id='Kf2']");
        if (!IsVisible(PassBox))
        {
            return Fail("Password box not visible");
        }
        SetText(PassBox, GetPassword("Pass"));
        Wait(2, 3);
        if (IsVisible(ElementByXPath("//img[contains(@src,'data:image/png;base64')]")))
        {
            DoSolveImageCaptcha(ElementByXPath("//img[contains(@src,'data:image/png;base64')]"), ElementByXPath("//td[@align='left']//input[@type='text']"));
        }
        var agree = ElementByXPath("//a[@id='botao_login']");
        if (agree == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }
        Click(agree);
        Wait(8);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
      
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        var Goto_ads = ElementByXPath("//a[contains(@href,'neobux.com/m/v/')]");
        if (IsVisible(Goto_ads))
        {
            Click(Goto_ads);
            Wait(4);
        }
        Wait();
  

        Wait(3);
        var Ads = ElementsByXPath("//div[contains(@class,'cell c_adf')]//div[contains(@onmouseover,'h')]");
    
        int count_ads = Ads.Count;
        var _Ad = ElementByXPath("//div[@id='ap_hct0']");
        bool AdPrize = false;
        if (IsVisible(_Ad))
        {
            AdPrize = true;
        }
        if (!GetBoolSetting("AdPrize"))
        {
            AdPrize = true;
        }
       
        if (count_ads > 0 || !AdPrize)
        {
            return 0;
        }
        return GetWaitSetting();
        //let Faucet Collector continue.

    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
	private static bool cs;
    public override int DoSolveFaucet()
    {

      
        cs = false;
    
        Wait();

        var Ads = ElementsByXPath("//div[contains(@class,'cell c_adf')]//div[contains(@onmouseover,'h')]");
       
        Log(Ads.Count + " Standard ads detected");
        try
        {
            var n = 0;
            CheckForPopupsEnabled = false;
            while (Ads.Count > n)
            {
                try
                {
                    if (!IsVisible(Ads[n]))
                    {
                        n++;
                    }
                    else
                    {
                        CheckForPopupsEnabled = false;
                        Click(Ads[n], false);
                        Wait();
                        var reddot = ElementsByXPath("//div[contains(@class,'cell c_adf')]//img[contains(@src,'imagens') and contains(@src,'dot')]");
                        if (IsVisible(reddot[n]))
                        {
                            Click(reddot[n]);
                        }
                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                        Wait(5);
                        bool breaked = false;
                       
                        DateTime t2 = DateTime.Now.AddSeconds(20);
                        while (IsVisible(ElementByXPath("//div[@id='omt1']//div[@class='msgDv2']")))
                        {

                            Wait();
                            if (DateTime.Now > t2)
                            {
                                breaked = true;
                                break;
                                
                            }
                        }
                        Wait();
                        DateTime t1 = DateTime.Now.AddSeconds(40);
                        var errorbox = ElementByXPath("//div[@class='errorMn1']");
                        if (IsVisible(errorbox) || breaked)
                        {
                            n++;
                            Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                            CheckForPopupsEnabled = true;
                            CheckForPopups();
                            CheckForPopupsEnabled = false;
                         
                        }

                        Wait();
                        while (IsVisible(ElementByXPath("//canvas[@id='cnvs']"))){

                            Wait();
                            if (DateTime.Now > t1)
                            {
                                break;
                            }

                        }
               
                     

                        Wait();

                    }
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait();
                    if (!Driver.Url.Contains("https://www.neobux.com/m/v/"))
                    {
                        GoToUrl("https://www.neobux.com/m/v/");
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }
                    Wait(2, 3);
                   
                    Ads = ElementsByXPath("//div[contains(@class,'cell c_adf')]//div[contains(@onmouseover,'h')]");
            
                }
                catch (Exception)
                {
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait();
                    if (!Driver.Url.Contains("https://www.neobux.com/m/v/"))
                    {
                        GoToUrl("https://www.neobux.com/m/v/");
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }
                    Wait(2, 3);
                    
                     Ads = ElementsByXPath("//div[contains(@class,'cell c_adf')]//div[contains(@onmouseover,'h')]");
                  
                }
            }
        }
        catch (Exception)
        {
            Driver.Navigate().Refresh();
            Wait();
        }

        int cont_b = 0;
        if (GetBoolSetting("AdPrize"))
        {
            var ad = ElementByXPath("//a[@id='ap_h' and contains(@onclick,'ap_lk0')]");
            var ButtonAdSig = ElementByXPath("//a[@id='nxt_bt_a']");
            while ((IsVisible(ad) || IsVisible(ButtonAdSig)) && cont_b<=5)
            {
                try
                {
                    ad = ElementByXPath("//a[@id='ap_h' and contains(@onclick,'ap_lk0')]");
                    ButtonAdSig = ElementByXPath("//a[@id='nxt_bt_a']");
                    CheckForPopupsEnabled = false;
                    if (IsVisible(ButtonAdSig))
                    {
                        Click(ButtonAdSig, false);

                    }
                    else
                    {
                        Click(ad,false);

                    }
                    
              
                    Wait(1);
                    Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                    Wait();
                    bool breaked = false;

                    DateTime t2 = DateTime.Now.AddSeconds(20);
                    while (IsVisible(ElementByXPath("//div[@id='omt1']//div[@class='msgDv2']")))
                    {

                        Wait();
                        if (DateTime.Now > t2)
                        {
                            breaked = true;
                            break;

                        }
                    }
                    Wait();
                    DateTime t1 = DateTime.Now.AddSeconds(40);
                    var errorbox = ElementByXPath("//div[@class='errorMn1']");
                    if (IsVisible(errorbox) || breaked)
                    {
                        cont_b++;
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                        CheckForPopupsEnabled = true;
                        CheckForPopups();
                        CheckForPopupsEnabled = false;

                    }

                    Wait();
                    while (IsVisible(ElementByXPath("//canvas[@id='cnvs']")))
                    {

                        Wait();
                        if (DateTime.Now > t1)
                        {
                            break;
                        }

                    }



                    Wait();




                    ButtonAdSig = ElementByXPath("//a[@id='nxt_bt_a']");
                    if (IsVisible(ButtonAdSig))
                    {
                      
                    }
                    else
                    {
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                        CheckForPopupsEnabled = true;
                        CheckForPopups();
                        CheckForPopupsEnabled = false;
                        ad = ElementByXPath("//a[@id='ap_h' and contains(@onclick,'ap_lk0')]");
                    }
                   
                }
                catch (Exception)
                {
                    cont_b++;
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    if (Driver.Url.Contains("neobux.com/m/v"))
                    {
                        Driver.Navigate().Refresh();
                    }
                    else
                    {
                        GoToUrl("https://www.neobux.com/m/v/");
                    }
                    CheckForPopupsEnabled = false;

                }

            }




        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
 
  
    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
       
        return base.CheckFaucetResult();
    }
}