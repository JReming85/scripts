
//============================================//
//script Written by: AviramDayan 01/02/2019 10:00AM
//============================================//
using FaucetCollector.Script;
//css_inc ShortlinkUtilities
public class SpeedUpFaucet : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings(UrlBase)
            {
                new FaucetSetting(){Name="Username",Display ="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
                //new FaucetSetting(){Name="WalletAddress",Display="WalletAddress",Type=EditorType.TextBox,Required=false},
                //new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw - on/off",Type=EditorType.CheckBox,Default=false},	
				
			
            };
        }
    }

    const string UrlBase = "https://www.speedup-faucet.com";
    string HostBase { get { return UrlBase.Replace("https://", "").Replace("http://", ""); } }

    public override void Start()
    {
        Title = "SpeedUp";
        
        SuccessXPath ="//span[@class='text-success']|//span[@style='color:green;']";
        FailXPath = "//span[@class='text-danger']";
       
        base.Start();
        SystemFilters.Rules.Add(new FaucetCollector.Proxy.Rules.FilterRule
        {
            Host = HostBase,
            Action = FaucetCollector.Proxy.Rules.FilterAction.Allow,
            Type = FaucetCollector.Proxy.Rules.FilterType.Url

        });
    }

  

    public override bool IsLoggedIn()
    {

        return ElementByXPath ( "//input[@id='usrLgOut']" )!=null;
    }

    public override int BeforeLogin()
    {
        var GotoLogin = ElementByXPath("//a[contains(text(),'Login')]");
        if (IsVisible(GotoLogin))
        {
            Click(GotoLogin);
        }

        return base.BeforeLogin();
    }

    public override int DoLogin()
    {
        GoToUrl ( "https://www.speedup-faucet.com/index.php" );
        Wait ( );
	     
        var signInUser = ElementByXPath("//input[@id='bitad']");
        if (!IsVisible(signInUser))
        {
            return Fail("User box not visible");
        }		
        var signInPassword = ElementByXPath("//input[@id='password']");
        if (!IsVisible(signInPassword))
        {
            return Fail("Password box not visible");
        }

        SetText(signInPassword, GetPassword("Password"));
        SetText ( signInUser , GetSetting ( "Username" ) );

        Wait (1);

		var loginButton = ElementByXPath("//input[@id='loginBtn']");
        if (!IsVisible(loginButton))
        {
            return Fail("Login button not visible");
        }
        Click(loginButton);
        Wait(1);
        var ErrorBox = ElementByXPath("//div[@style='color:red;']");
        if (IsVisible(ErrorBox))
        {
            Log(ErrorBox.Text);
            if(ErrorBox.Text.Contains("The username/password you entered is not valid"))
            {
                Disable();
                return Fail("You have not entered correct data. Please check your username/Password");
            }
        }
        return base.DoLogin();
    }

	
	
//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        var AvailableClaims=ElementsByXPath("//input[@name='start']");
        if ( AvailableClaims.Count==0 )
        {
            return GetWaitSetting ( );
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
       
    }
    public override int DoSolveFaucet()
    {

        var GoClaimButton = ElementByXPath("//input[@name='start']");

        if (!IsVisible(GoClaimButton))
        {

            return Fail("Button claim not visible");
        }
        Click(GoClaimButton);
        Wait();

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return Fail ( "Fail solving captcha" );
        }

        var ClaimButton=ElementByXPath("//input[@id='claimBtn']");
        if ( !IsVisible(ClaimButton) )
        {
            return Fail ( "Claim button not found" );
        }

        Click ( ClaimButton );

        ShortLinkBypasser bypasser=new ShortLinkBypasser(this);

       bool solved= bypasser.DoShortLink ( );

        if ( solved )
        {
            CheckFaucetResult ( );
            return GetWaitSetting ( );
        }



        return base.DoSolveFaucet();
    }

} // end class
